# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "txn", "name": "mbr_payment"}], "name": "mint_eco", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "txn", "name": "mbr_payment"}], "name": "bootstrap_via_outer_and_add_initial_liquidity", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "txn", "name": "plot_payment"}, {"type": "txn", "name": "mbr_payment"}], "name": "mint_plot", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "claim_plot_rewards", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}], "name": "Eco", "state": {"keys": {"box": {}, "global": {"eco_token": {"key": "ZWNvX3Rva2Vu", "keyType": "AVMString", "valueType": "AVMUint64"}, "eco_token_created": {"key": "ZWNvX3Rva2VuX2NyZWF0ZWQ=", "keyType": "AVMString", "valueType": "AVMUint64"}, "eco_lp_token": {"key": "ZWNvX2xwX3Rva2Vu", "keyType": "AVMString", "valueType": "AVMUint64"}, "plot_count": {"key": "cGxvdF9jb3VudA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "next_plot": {"key": "bmV4dF9wbG90", "keyType": "AVMString", "valueType": "AVMUint64"}, "plot_cost": {"key": "cGxvdF9jb3N0", "keyType": "AVMString", "valueType": "AVMUint64"}, "plot_reward_rate": {"key": "cGxvdF9yZXdhcmRfcmF0ZQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "pool_logicsig_template": {"key": "cG9vbF9sb2dpY3NpZ190ZW1wbGF0ZQ==", "keyType": "AVMString", "valueType": "AVMBytes"}, "tinyman_router": {"key": "dGlueW1hbl9yb3V0ZXI=", "keyType": "AVMString", "valueType": "AVMUint64"}, "empty_plot_items": {"key": "ZW1wdHlfcGxvdF9pdGVtcw==", "keyType": "AVMString", "valueType": "byte[10]"}}, "local": {}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 2, "ints": 8}, "local": {"bytes": 0, "ints": 0}}}, "structs": {}, "byteCode": {"approval": "CyAFAAEDBMCEPSYPCWVjb190b2tlbgluZXh0X3Bsb3QKcGxvdF9jb3VudAAMZWNvX2xwX3Rva2VuCXBsb3RfY29zdBBwbG90X3Jld2FyZF9yYXRlFnBvb2xfbG9naWNzaWdfdGVtcGxhdGUOdGlueW1hbl9yb3V0ZXIQZW1wdHlfcGxvdF9pdGVtcwowMTIzNDU2Nzg5A0VDTwQVH3x1CFBsb3QgIzogBFBMT1QxGEAAjCgiZ4ARZWNvX3Rva2VuX2NyZWF0ZWQiZycEImcqI2cpImcnBYGQTmcnBiEEZ4BAQm9BWUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBZ1FCYk5RQTBBREVZRWtReEdZRUJFa1NCQVVNPV4BJwdMZycIgZig7kZnJwmACgAAAAAAAAAAAABnMRtBACsxGRREMRhEggQER+d8OARvmRH9BHE1EkEEfM6fHzYaAI4EAIcA4QJpA7MAMRkUMRgUEEQjQzEAMgkSRImKAQCL/zgQSSMSSUAAB4sAJRJBABkjRIsBQQAJi/84BzIKEkSJi/84FDIKEkSJIkL/5IoDAIv+i/0Ji/84CEwJsTEAsgeyCCOyECKyAbOJigEBi/+BCgxBAAcnCov/I1iJi/+BCgqI/+aL/4EKGCcKTCNYUIkxFiMJiP99SYj/gEk4ECMSRDIKcwFEsTIKSSKyJLIqsikisiOB////////////AbIiJwuyJScLsiYkshAisgGzKLQ8ZzIKcwFETwKI/28iKGVEFicMTFCwI0MrSTEWIwlJiP8gSYj/IzgQIxJEMgpzAUQiJwdlREkVIksBDyJLAk8CTSRLAg8kSwNPAk1LA04CUiInCGVESRZPAkxQIihlREkWTwJMUIAIAAAAAAAAAABQgRtLBA+BG0sFTwJNTwVMTwVSUIAHUHJvZ3JhbUxQA0lLA4ATcG9vbF90b2tlbl9hc3NldF9pZGNIMgqxshRJshElshAisgG2gYCAgICAgICAgAGyEksBshRPArIRJbIQIrIBtiEEsghLAbIHI7IQIrIBtkyyHEmyMIAVYWRkX2luaXRpYWxfbGlxdWlkaXR5shoishlMshiBBrIQIrIBsycETGciKmVEiP59SStMFUkkDkEAQEsCRQKxJw1LAlAyCkcCI7IksiuyKrIpIrIjI7IiJw6yJbImJLIQIrIBsym0PGcyCnMBRCEECEsETEsGiP4YI0MiRQciRQZLBUsBDEH/tksGIwhJRQgkEkEAC0sBgAEsUEUCIkUHSwJLBklOAiNYSwNMUEUDIwhFBkL/yyJJK0cCMRaBAgkxFiMJSU4CSwGI/ZNJiP2PSwE4ECMSRDgQIxJESTgHMgoSRDgIIicFZUQSRDIKcwFEgAFwMQBQSSIpZUQWMgcWIicJZUROAlBMUE4CvUUBQQDiSb1ESYEaCEsCTNOBGksD0iIqZUQjCCpLAWeI/X9JRQkrRQgVSUUFJA5BAHtLB0UHsScNSwdQMgpHAiOyJLIrsiqyKSKyIyOyIicOsiWyJiSyECKyAbO0PCIpZUQxALEisi9LAbItsi6BBbIQIrIBs7ExAEsBshGyFCOyEiWyECKyAbMxALEjsi+yLrItgQWyECKyAbMpTGcyCnMBREsCTEsEiPzaI0MiRQYiRQVLBEsEDEH/e0sFIwhJRQckEkEAC0sGgAEsUEUHIkUGSwdLBUlOAiNYSwhMUEUIIwhFBUL/y0mBGrlIIksCu0L/IiKAAXAxAFBJvUSBGgoiSUsCDEEAOEcCgRoISwRJTgNLAk8CujIHTIEIWwkiJwZlRAtLBghFBkmBCAgyBxZPA08CgQhPA9IjCEUBQv/BsSIoZUQxALIUSwRJTgKyErIRJbIQIrIBsxYnDExQsCND", "clear": "C4EBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 5, "minor": 3, "patch": 2}}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [326], "errorMessage": "OnCompletion must be NoOp"}, {"pc": [373], "errorMessage": "OnCompletion must be NoOp && can only call when creating"}, {"pc": [521, 572, 613, 909, 1040, 1230], "errorMessage": "account funded"}, {"pc": [1076, 1321], "errorMessage": "check Box exists"}, {"pc": [581, 660, 1393], "errorMessage": "check self.eco_token exists"}, {"pc": [1060], "errorMessage": "check self.empty_plot_items exists"}, {"pc": [1051, 1165], "errorMessage": "check self.next_plot exists"}, {"pc": [1033], "errorMessage": "check self.plot_cost exists"}, {"pc": [845, 1093], "errorMessage": "check self.plot_count exists"}, {"pc": [1359], "errorMessage": "check self.plot_reward_rate exists"}, {"pc": [618], "errorMessage": "check self.pool_logicsig_template exists"}, {"pc": [650], "errorMessage": "check self.tinyman_router exists"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class MintEcoArgs:
    """Dataclass for mint_eco arguments"""
    mbr_payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "mint_eco(txn)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class BootstrapViaOuterAndAddInitialLiquidityArgs:
    """Dataclass for bootstrap_via_outer_and_add_initial_liquidity arguments"""
    mbr_payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "bootstrap_via_outer_and_add_initial_liquidity(txn)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class MintPlotArgs:
    """Dataclass for mint_plot arguments"""
    plot_payment: algokit_utils.AppMethodCallTransactionArgument | None = None
    mbr_payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "mint_plot(txn,txn)void"


class EcoParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def mint_eco(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | MintEcoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_eco(txn)uint64",
            "args": method_args,
        }))

    def bootstrap_via_outer_and_add_initial_liquidity(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BootstrapViaOuterAndAddInitialLiquidityArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bootstrap_via_outer_and_add_initial_liquidity(txn)void",
            "args": method_args,
        }))

    def mint_plot(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument | None, algokit_utils.AppMethodCallTransactionArgument] | MintPlotArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_plot(txn,txn)void",
            "args": method_args,
        }))

    def claim_plot_rewards(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_plot_rewards()uint64",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class EcoCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def mint_eco(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | MintEcoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_eco(txn)uint64",
            "args": method_args,
        }))

    def bootstrap_via_outer_and_add_initial_liquidity(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BootstrapViaOuterAndAddInitialLiquidityArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bootstrap_via_outer_and_add_initial_liquidity(txn)void",
            "args": method_args,
        }))

    def mint_plot(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument | None, algokit_utils.AppMethodCallTransactionArgument] | MintPlotArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_plot(txn,txn)void",
            "args": method_args,
        }))

    def claim_plot_rewards(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_plot_rewards()uint64",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class EcoSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def mint_eco(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | MintEcoArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_eco(txn)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def bootstrap_via_outer_and_add_initial_liquidity(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BootstrapViaOuterAndAddInitialLiquidityArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bootstrap_via_outer_and_add_initial_liquidity(txn)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def mint_plot(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument | None, algokit_utils.AppMethodCallTransactionArgument] | MintPlotArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_plot(txn,txn)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def claim_plot_rewards(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "claim_plot_rewards()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    eco_token: int
    eco_token_created: int
    eco_lp_token: int
    plot_count: int
    next_plot: int
    plot_cost: int
    plot_reward_rate: int
    pool_logicsig_template: bytes
    tinyman_router: int
    empty_plot_items: bytes

class EcoState:
    """Methods to access state for the current Eco app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def eco_token(self) -> int:
        """Get the current value of the eco_token key in global_state state"""
        value = self.app_client.state.global_state.get_value("eco_token")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def eco_token_created(self) -> int:
        """Get the current value of the eco_token_created key in global_state state"""
        value = self.app_client.state.global_state.get_value("eco_token_created")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def eco_lp_token(self) -> int:
        """Get the current value of the eco_lp_token key in global_state state"""
        value = self.app_client.state.global_state.get_value("eco_lp_token")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def plot_count(self) -> int:
        """Get the current value of the plot_count key in global_state state"""
        value = self.app_client.state.global_state.get_value("plot_count")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def next_plot(self) -> int:
        """Get the current value of the next_plot key in global_state state"""
        value = self.app_client.state.global_state.get_value("next_plot")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def plot_cost(self) -> int:
        """Get the current value of the plot_cost key in global_state state"""
        value = self.app_client.state.global_state.get_value("plot_cost")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def plot_reward_rate(self) -> int:
        """Get the current value of the plot_reward_rate key in global_state state"""
        value = self.app_client.state.global_state.get_value("plot_reward_rate")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def pool_logicsig_template(self) -> bytes:
        """Get the current value of the pool_logicsig_template key in global_state state"""
        value = self.app_client.state.global_state.get_value("pool_logicsig_template")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def tinyman_router(self) -> int:
        """Get the current value of the tinyman_router key in global_state state"""
        value = self.app_client.state.global_state.get_value("tinyman_router")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def empty_plot_items(self) -> bytes:
        """Get the current value of the empty_plot_items key in global_state state"""
        value = self.app_client.state.global_state.get_value("empty_plot_items")
        if isinstance(value, dict) and "byte[10]" in self._struct_classes:
            return _init_dataclass(self._struct_classes["byte[10]"], value)  # type: ignore
        return typing.cast(bytes, value)

class EcoClient:
    """Client for interacting with Eco smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = EcoParams(self.app_client)
        self.create_transaction = EcoCreateTransactionParams(self.app_client)
        self.send = EcoSend(self.app_client)
        self.state = EcoState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "EcoClient":
        return EcoClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "EcoClient":
        return EcoClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "EcoClient":
        return EcoClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "EcoComposer":
        return EcoComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["mint_eco(txn)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["bootstrap_via_outer_and_add_initial_liquidity(txn)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["mint_plot(txn,txn)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["claim_plot_rewards()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | int:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class EcoBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating Eco contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class EcoFactory(algokit_utils.TypedAppFactoryProtocol[EcoBareCallCreateParams, None, None]):
    """Factory for deploying and managing EcoClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = EcoFactoryParams(self.app_factory)
        self.create_transaction = EcoFactoryCreateTransaction(self.app_factory)
        self.send = EcoFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: EcoBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[EcoClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return EcoClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> EcoClient:
        """Get an app client by creator address and name"""
        return EcoClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> EcoClient:
        """Get an app client by app ID"""
        return EcoClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class EcoFactoryParams:
    """Parameters for creating transactions for Eco contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = EcoFactoryCreateParams(app_factory)
        self.update = EcoFactoryUpdateParams(app_factory)
        self.delete = EcoFactoryDeleteParams(app_factory)

class EcoFactoryCreateParams:
    """Parameters for 'create' operations of Eco contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def mint_eco(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | MintEcoArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the mint_eco(txn)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "mint_eco(txn)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def bootstrap_via_outer_and_add_initial_liquidity(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BootstrapViaOuterAndAddInitialLiquidityArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the bootstrap_via_outer_and_add_initial_liquidity(txn)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "bootstrap_via_outer_and_add_initial_liquidity(txn)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def mint_plot(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | MintPlotArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the mint_plot(txn,txn)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "mint_plot(txn,txn)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def claim_plot_rewards(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the claim_plot_rewards()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "claim_plot_rewards()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

class EcoFactoryUpdateParams:
    """Parameters for 'update' operations of Eco contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class EcoFactoryDeleteParams:
    """Parameters for 'delete' operations of Eco contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class EcoFactoryCreateTransaction:
    """Create transactions for Eco contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = EcoFactoryCreateTransactionCreate(app_factory)


class EcoFactoryCreateTransactionCreate:
    """Create new instances of Eco contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class EcoFactorySend:
    """Send calls to Eco contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = EcoFactorySendCreate(app_factory)


class EcoFactorySendCreate:
    """Send create calls to Eco contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[EcoClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return EcoClient(result[0]), result[1]


class EcoComposer:
    """Composer for creating transaction groups for Eco contract calls"""

    def __init__(self, client: "EcoClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def mint_eco(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | MintEcoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "EcoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.mint_eco(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "mint_eco(txn)uint64", v
            )
        )
        return self

    def bootstrap_via_outer_and_add_initial_liquidity(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BootstrapViaOuterAndAddInitialLiquidityArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "EcoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.bootstrap_via_outer_and_add_initial_liquidity(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "bootstrap_via_outer_and_add_initial_liquidity(txn)void", v
            )
        )
        return self

    def mint_plot(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument | None, algokit_utils.AppMethodCallTransactionArgument] | MintPlotArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "EcoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.mint_plot(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "mint_plot(txn,txn)void", v
            )
        )
        return self

    def claim_plot_rewards(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "EcoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.claim_plot_rewards(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "claim_plot_rewards()uint64", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "EcoComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "EcoComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
