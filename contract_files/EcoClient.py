# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "txn", "name": "mbr_payment"}], "name": "mint_eco", "returns": {"type": "uint64"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "txn", "name": "mbr_payment"}], "name": "bootstrap_via_outer_and_add_initial_liquidity", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "txn", "name": "plot_payment"}, {"type": "txn", "name": "mbr_payment"}], "name": "mint_plot", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "Eco", "state": {"keys": {"box": {}, "global": {"eco_token": {"key": "ZWNvX3Rva2Vu", "keyType": "AVMString", "valueType": "AVMUint64"}, "eco_token_created": {"key": "ZWNvX3Rva2VuX2NyZWF0ZWQ=", "keyType": "AVMString", "valueType": "AVMUint64"}, "eco_lp_token": {"key": "ZWNvX2xwX3Rva2Vu", "keyType": "AVMString", "valueType": "AVMUint64"}, "plot_count": {"key": "cGxvdF9jb3VudA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "next_plot": {"key": "bmV4dF9wbG90", "keyType": "AVMString", "valueType": "AVMUint64"}, "plot_cost": {"key": "cGxvdF9jb3N0", "keyType": "AVMString", "valueType": "AVMUint64"}, "plot_reward_rate": {"key": "cGxvdF9yZXdhcmRfcmF0ZQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "pool_logicsig_template": {"key": "cG9vbF9sb2dpY3NpZ190ZW1wbGF0ZQ==", "keyType": "AVMString", "valueType": "AVMBytes"}, "tinyman_router": {"key": "dGlueW1hbl9yb3V0ZXI=", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 1, "ints": 8}, "local": {"bytes": 0, "ints": 0}}}, "structs": {}, "byteCode": {"approval": "CyAFAAEDBMCEPSYNCW5leHRfcGxvdAllY29fdG9rZW4KcGxvdF9jb3VudAAMZWNvX2xwX3Rva2VuCXBsb3RfY29zdBZwb29sX2xvZ2ljc2lnX3RlbXBsYXRlDnRpbnltYW5fcm91dGVyCjAxMjM0NTY3ODkDRUNPCAAAAAAAAAAACFBsb3QgIzogBFBMT1QxGEAAjSkiZ4ARZWNvX3Rva2VuX2NyZWF0ZWQiZycEImcqI2coImcnBYGQTmeAEHBsb3RfcmV3YXJkX3JhdGUhBGeAQEJvQVlBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQWdRQmJOUUEwQURFWUVrUXhHWUVCRWtTQkFVTT1eAScGTGcnB4GYoO5GZzEbQQAkMRkURDEYRIIDBEfnfDgEb5kR/QRxNRJBNhoAjgMAhQDjAmAAMRkUMRgUEEMxADIJEkSJigEAi/84EEkjEklAAAeLACUSQQAZI0SLAUEACYv/OAcyChJEiYv/OBQyChJEiSJC/+SKAwCL/ov9CYv/OAhMCbExALIHsggjshAisgGziYoBAYv/gQoMQQAHJwiL/yNYiYv/gQoKiP/mi/+BChgnCEwjWFCJMRYjCYj/fUmI/4BJOBAjEkQyCnMBRLEyCkkisiSyKrIpIrIjgf///////////wGyIicJsiUnCbImJLIQIrIBsym0PGcyCnMBRE8CiP9vIillRBaABBUffHVMULAjQytJMRYjCUmI/xxJiP8fOBAjEkQyCnMBRCInBmVESRUiSwEPIksCTwJNJEsCDyRLA08CTUsDTgJSIicHZURJFk8CTFAiKWVESRZPAkxQJwpQgRtLBA+BG0sFTwJNTwVMTwVSUIAHUHJvZ3JhbUxQA0lLA4ATcG9vbF90b2tlbl9hc3NldF9pZGNIMgqxshRJshElshAisgG2gYCAgICAgICAgAGyEksBshRPArIRJbIQIrIBtiEEsghLAbIHI7IQIrIBtkyyHEmyMIAVYWRkX2luaXRpYWxfbGlxdWlkaXR5shoishlMshiBBrIQIrIBsycETGciKmVEiP6BSStMFUkkDkEAPUsCRQKxJwtLAlAyCkkisiSyKrIpIrIjI7IiJwyyJbImJLIQIrIBsyi0PGcyCnMBRCEECEsETEsGiP4fI0MiRQciRQZLBUsBDEH/uUsGIwhJRQgkEkEAC0sBgAEsUEUCIkUHSwJLBklOAiNYSwNMUEUDIwhFBkL/yyJJK0cCMRaBAgkxFiMJSU4CSwGI/ZpJiP2WSwE4ECMSRDgQIxJESTgHMgoSRDgIIicFZUQSRDIKcwFEgAFwMQBQSSIoZUQWJwpQTL1FAUEAuUsBSb1ESYEQCEsCTNOBEE8D0iIqZUQjCCpLAWeI/Y9JRQkrRQgVSUUFJA5BAFBLB0UHsScLSwdQMgpJIrIksiqyKSKyIyOyIicMsiWyJiSyECKyAbO0PLExACIoZUSyEbIUI7ISJbIQIrIBsyhMZzIKcwFESwJMSwSI/RUjQyJFBiJFBUsESwQMQf+mSwUjCElFByQSQQALSwaAASxQRQciRQZLB0sFSU4CI1hLCExQRQgjCEUFQv/LSwFJgRC5SCJPArtC/0s=", "clear": "C4EBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 5, "minor": 0, "patch": 1}}, "events": [], "networks": {}, "source": {"approval": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAwIDEgMyA0IDEwMDAwMDAKICAgIGJ5dGVjYmxvY2sgIm5leHRfcGxvdCIgImVjb190b2tlbiIgInBsb3RfY291bnQiIDB4ICJlY29fbHBfdG9rZW4iICJwbG90X2Nvc3QiICJwb29sX2xvZ2ljc2lnX3RlbXBsYXRlIiAidGlueW1hbl9yb3V0ZXIiIDB4MzAzMTMyMzMzNDM1MzYzNzM4MzkgIkVDTyIgMHgwMDAwMDAwMDAwMDAwMDAwIDB4NTA2YzZmNzQyMDIzM2EyMCAiUExPVCIKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIGNvbnRyYWN0LnB5OjQ4CiAgICAvLyBzZWxmLmVjb190b2tlbiA9IFVJbnQ2NCgwKQogICAgYnl0ZWNfMSAvLyAiZWNvX3Rva2VuIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBjb250cmFjdC5weTo0OQogICAgLy8gc2VsZi5lY29fdG9rZW5fY3JlYXRlZCA9IEZhbHNlCiAgICBwdXNoYnl0ZXMgImVjb190b2tlbl9jcmVhdGVkIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBjb250cmFjdC5weTo1MAogICAgLy8gc2VsZi5lY29fbHBfdG9rZW4gPSBVSW50NjQoMCkKICAgIGJ5dGVjIDQgLy8gImVjb19scF90b2tlbiIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gY29udHJhY3QucHk6NTEKICAgIC8vIHNlbGYucGxvdF9jb3VudCA9IFVJbnQ2NCgxKQogICAgYnl0ZWNfMiAvLyAicGxvdF9jb3VudCIKICAgIGludGNfMSAvLyAxCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gY29udHJhY3QucHk6NTIKICAgIC8vIHNlbGYubmV4dF9wbG90ID0gVUludDY0KDApCiAgICBieXRlY18wIC8vICJuZXh0X3Bsb3QiCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIGNvbnRyYWN0LnB5OjUzCiAgICAvLyBzZWxmLnBsb3RfY29zdCA9IFVJbnQ2NCgxMF8wMDApCiAgICBieXRlYyA1IC8vICJwbG90X2Nvc3QiCiAgICBwdXNoaW50IDEwMDAwIC8vIDEwMDAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gY29udHJhY3QucHk6NTQKICAgIC8vIHNlbGYucGxvdF9yZXdhcmRfcmF0ZSA9IFVJbnQ2NCgxXzAwMF8wMDApCiAgICBwdXNoYnl0ZXMgInBsb3RfcmV3YXJkX3JhdGUiCiAgICBpbnRjIDQgLy8gMTAwMDAwMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIGNvbnRyYWN0LnB5OjU1CiAgICAvLyBzZWxmLnBvb2xfbG9naWNzaWdfdGVtcGxhdGUgPSBvcC5iYXNlNjRfZGVjb2RlKG9wLkJhc2U2NC5TdGRFbmNvZGluZywgYiJCb0FZQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFnUUJiTlFBMEFERVlFa1F4R1lFQkVrU0JBVU09IikKICAgIHB1c2hieXRlcyAweDQyNmY0MTU5NDE0MTQxNDE0MTQxNDE0MTQxNDE0MTQxNDE0MTQxNDE0MTQxNDE0MTQxNDE0MTQxNDE0MTQxNDE0MTQxNDE0MTY3NTE0MjYyNGU1MTQxMzA0MTQ0NDU1OTQ1NmI1MTc4NDc1OTQ1NDI0NTZiNTM0MjQxNTU0ZDNkCiAgICBiYXNlNjRfZGVjb2RlIFN0ZEVuY29kaW5nCiAgICBieXRlYyA2IC8vICJwb29sX2xvZ2ljc2lnX3RlbXBsYXRlIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIGNvbnRyYWN0LnB5OjU2CiAgICAvLyBzZWxmLnRpbnltYW5fcm91dGVyID0gQXBwbGljYXRpb24oMTQ4NjA3MDAwKSAjdGVzdG5ldAogICAgYnl0ZWMgNyAvLyAidGlueW1hbl9yb3V0ZXIiCiAgICBwdXNoaW50IDE0ODYwNzAwMCAvLyAxNDg2MDcwMDAKICAgIGFwcF9nbG9iYWxfcHV0CgptYWluX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIGNvbnRyYWN0LnB5OjQ2CiAgICAvLyBjbGFzcyBFY28oQVJDNENvbnRyYWN0KToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX19fYWxnb3B5X2RlZmF1bHRfY3JlYXRlQDEyCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIG11c3QgYmUgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydAogICAgcHVzaGJ5dGVzcyAweDQ3ZTc3YzM4IDB4NmY5OTExZmQgMHg3MTM1MTI0MSAvLyBtZXRob2QgIm1pbnRfZWNvKHR4bil1aW50NjQiLCBtZXRob2QgImJvb3RzdHJhcF92aWFfb3V0ZXJfYW5kX2FkZF9pbml0aWFsX2xpcXVpZGl0eSh0eG4pdm9pZCIsIG1ldGhvZCAibWludF9wbG90KHR4bix0eG4pdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1pbnRfZWNvIGJvb3RzdHJhcF92aWFfb3V0ZXJfYW5kX2FkZF9pbml0aWFsX2xpcXVpZGl0eSBtaW50X3Bsb3QKICAgIGVycgoKbWFpbl9fX2FsZ29weV9kZWZhdWx0X2NyZWF0ZUAxMjoKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICAmJgogICAgcmV0dXJuIC8vIG9uIGVycm9yOiBPbkNvbXBsZXRpb24gbXVzdCBiZSBOb09wICYmIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwoKCi8vIGNvbnRyYWN0LmlzX2NyZWF0b3IoKSAtPiB2b2lkOgppc19jcmVhdG9yOgogICAgLy8gY29udHJhY3QucHk6NgogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcwogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0CiAgICByZXRzdWIKCgovLyBjb250cmFjdC5jb250cmFjdF9pc19yZWNlaXZlcih0eG46IHVpbnQ2NCkgLT4gdm9pZDoKY29udHJhY3RfaXNfcmVjZWl2ZXI6CiAgICAvLyBjb250cmFjdC5weToxMi0xMwogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBjb250cmFjdF9pc19yZWNlaXZlcih0eG46IGd0eG4uVHJhbnNhY3Rpb24pIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIGNvbnRyYWN0LnB5OjE0CiAgICAvLyBhc3NlcnQgdHhuLnR5cGUgaW4gKFRyYW5zYWN0aW9uVHlwZS5QYXltZW50LCBUcmFuc2FjdGlvblR5cGUuQXNzZXRUcmFuc2ZlcikKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgVHlwZUVudW0KICAgIGR1cAogICAgaW50Y18xIC8vIHBheQogICAgPT0KICAgIGR1cAogICAgYm56IGNvbnRyYWN0X2lzX3JlY2VpdmVyX2Jvb2xfdHJ1ZUAyCiAgICBmcmFtZV9kaWcgMAogICAgaW50Y18zIC8vIGF4ZmVyCiAgICA9PQogICAgYnogY29udHJhY3RfaXNfcmVjZWl2ZXJfYm9vbF9mYWxzZUAzCgpjb250cmFjdF9pc19yZWNlaXZlcl9ib29sX3RydWVAMjoKICAgIGludGNfMSAvLyAxCgpjb250cmFjdF9pc19yZWNlaXZlcl9ib29sX21lcmdlQDQ6CiAgICAvLyBjb250cmFjdC5weToxNAogICAgLy8gYXNzZXJ0IHR4bi50eXBlIGluIChUcmFuc2FjdGlvblR5cGUuUGF5bWVudCwgVHJhbnNhY3Rpb25UeXBlLkFzc2V0VHJhbnNmZXIpCiAgICBhc3NlcnQKICAgIC8vIGNvbnRyYWN0LnB5OjE1CiAgICAvLyBpZiB0eG4udHlwZSA9PSBUcmFuc2FjdGlvblR5cGUuUGF5bWVudDoKICAgIGZyYW1lX2RpZyAxCiAgICBieiBjb250cmFjdF9pc19yZWNlaXZlcl9lbHNlX2JvZHlANgogICAgLy8gY29udHJhY3QucHk6MTYKICAgIC8vIGFzc2VydCB0eG4ucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICBhc3NlcnQKICAgIHJldHN1YgoKY29udHJhY3RfaXNfcmVjZWl2ZXJfZWxzZV9ib2R5QDY6CiAgICAvLyBjb250cmFjdC5weToxOAogICAgLy8gYXNzZXJ0IHR4bi5hc3NldF9yZWNlaXZlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEFzc2V0UmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0CiAgICByZXRzdWIKCmNvbnRyYWN0X2lzX3JlY2VpdmVyX2Jvb2xfZmFsc2VAMzoKICAgIGludGNfMCAvLyAwCiAgICBiIGNvbnRyYWN0X2lzX3JlY2VpdmVyX2Jvb2xfbWVyZ2VANAoKCi8vIGNvbnRyYWN0LnJlZnVuZF9leGNlc3NfbWJyKHByZV9tYnI6IHVpbnQ2NCwgcG9zdF9tYnI6IHVpbnQ2NCwgbWJyX3BheW1lbnQ6IHVpbnQ2NCkgLT4gdm9pZDoKcmVmdW5kX2V4Y2Vzc19tYnI6CiAgICAvLyBjb250cmFjdC5weToyNC0yNQogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiByZWZ1bmRfZXhjZXNzX21icihwcmVfbWJyOiBVSW50NjQsIHBvc3RfbWJyOiBVSW50NjQsIG1icl9wYXltZW50OiBndHhuLlRyYW5zYWN0aW9uKSAtPiBOb25lOgogICAgcHJvdG8gMyAwCiAgICAvLyBjb250cmFjdC5weToyNgogICAgLy8gbWJyX3VzZWQgPSBwb3N0X21iciAtIHByZV9tYnIKICAgIGZyYW1lX2RpZyAtMgogICAgZnJhbWVfZGlnIC0zCiAgICAtCiAgICAvLyBjb250cmFjdC5weToyNwogICAgLy8gZXhjZXNzID0gbWJyX3BheW1lbnQuYW1vdW50IC0gbWJyX3VzZWQKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQW1vdW50CiAgICBzd2FwCiAgICAtCiAgICAvLyBjb250cmFjdC5weToyOC0zMQogICAgLy8gaXR4bi5QYXltZW50KAogICAgLy8gICAgIHJlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICAvLyAgICAgYW1vdW50PWV4Y2VzcwogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gY29udHJhY3QucHk6MjkKICAgIC8vIHJlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICB0eG4gU2VuZGVyCiAgICBpdHhuX2ZpZWxkIFJlY2VpdmVyCiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgLy8gY29udHJhY3QucHk6MjgKICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIGludGNfMSAvLyBwYXkKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gY29udHJhY3QucHk6MjgtMzEKICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIC8vICAgICByZWNlaXZlcj1UeG4uc2VuZGVyLAogICAgLy8gICAgIGFtb3VudD1leGNlc3MKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIKCgovLyBjb250cmFjdC5pdG9hKGk6IHVpbnQ2NCkgLT4gYnl0ZXM6Cml0b2E6CiAgICAvLyBjb250cmFjdC5weTozMy0zNAogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBpdG9hKGk6IFVJbnQ2NCkgLT4gQnl0ZXM6CiAgICBwcm90byAxIDEKICAgIC8vIGNvbnRyYWN0LnB5OjM3CiAgICAvLyBpZiBpIDwgcmFkaXg6CiAgICBmcmFtZV9kaWcgLTEKICAgIC8vIGNvbnRyYWN0LnB5OjM2CiAgICAvLyByYWRpeCA9IGRpZ2l0cy5sZW5ndGgKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgIC8vIGNvbnRyYWN0LnB5OjM3CiAgICAvLyBpZiBpIDwgcmFkaXg6CiAgICA8CiAgICBieiBpdG9hX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gY29udHJhY3QucHk6MzUKICAgIC8vIGRpZ2l0cyA9IEJ5dGVzKGIiMDEyMzQ1Njc4OSIpCiAgICBieXRlYyA4IC8vIDB4MzAzMTMyMzMzNDM1MzYzNzM4MzkKICAgIC8vIGNvbnRyYWN0LnB5OjM4CiAgICAvLyByZXR1cm4gZGlnaXRzW2ldCiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMSAvLyAxCiAgICBleHRyYWN0MwogICAgcmV0c3ViCgppdG9hX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIGNvbnRyYWN0LnB5OjQwCiAgICAvLyByZXR1cm4gaXRvYShpIC8vIHJhZGl4KSArIGRpZ2l0c1tpICUgcmFkaXhdCiAgICBmcmFtZV9kaWcgLTEKICAgIC8vIGNvbnRyYWN0LnB5OjM2CiAgICAvLyByYWRpeCA9IGRpZ2l0cy5sZW5ndGgKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgIC8vIGNvbnRyYWN0LnB5OjQwCiAgICAvLyByZXR1cm4gaXRvYShpIC8vIHJhZGl4KSArIGRpZ2l0c1tpICUgcmFkaXhdCiAgICAvCiAgICBjYWxsc3ViIGl0b2EKICAgIGZyYW1lX2RpZyAtMQogICAgLy8gY29udHJhY3QucHk6MzYKICAgIC8vIHJhZGl4ID0gZGlnaXRzLmxlbmd0aAogICAgcHVzaGludCAxMCAvLyAxMAogICAgLy8gY29udHJhY3QucHk6NDAKICAgIC8vIHJldHVybiBpdG9hKGkgLy8gcmFkaXgpICsgZGlnaXRzW2kgJSByYWRpeF0KICAgICUKICAgIC8vIGNvbnRyYWN0LnB5OjM1CiAgICAvLyBkaWdpdHMgPSBCeXRlcyhiIjAxMjM0NTY3ODkiKQogICAgYnl0ZWMgOCAvLyAweDMwMzEzMjMzMzQzNTM2MzczODM5CiAgICAvLyBjb250cmFjdC5weTo0MAogICAgLy8gcmV0dXJuIGl0b2EoaSAvLyByYWRpeCkgKyBkaWdpdHNbaSAlIHJhZGl4XQogICAgc3dhcAogICAgaW50Y18xIC8vIDEKICAgIGV4dHJhY3QzCiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIGNvbnRyYWN0LkVjby5taW50X2Vjb1tyb3V0aW5nXSgpIC0+IHZvaWQ6Cm1pbnRfZWNvOgogICAgLy8gY29udHJhY3QucHk6NTgKICAgIC8vIEBhYmltZXRob2QKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgLy8gY29udHJhY3QucHk6NjAKICAgIC8vIGlzX2NyZWF0b3IoKQogICAgY2FsbHN1YiBpc19jcmVhdG9yCiAgICAvLyBjb250cmFjdC5weTo2MQogICAgLy8gY29udHJhY3RfaXNfcmVjZWl2ZXIobWJyX3BheW1lbnQpCiAgICBkdXAKICAgIGNhbGxzdWIgY29udHJhY3RfaXNfcmVjZWl2ZXIKICAgIC8vIGNvbnRyYWN0LnB5OjIyCiAgICAvLyBhc3NlcnQgdHhuLnR5cGUgPT0gVHJhbnNhY3Rpb25UeXBlLlBheW1lbnQKICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludGNfMSAvLyBwYXkKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGNvbnRyYWN0LnB5OjEwCiAgICAvLyByZXR1cm4gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcy5taW5fYmFsYW5jZQogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIGFjY3RfcGFyYW1zX2dldCBBY2N0TWluQmFsYW5jZQogICAgYXNzZXJ0IC8vIGFjY291bnQgZnVuZGVkCiAgICAvLyBjb250cmFjdC5weTo2NS03MwogICAgLy8gY3JlYXRlX2Vjb190eG4gPSBpdHhuLkFzc2V0Q29uZmlnKAogICAgLy8gICAgIGFzc2V0X25hbWU9J0VDTycsCiAgICAvLyAgICAgdW5pdF9uYW1lPSdFQ08nLAogICAgLy8gICAgIHRvdGFsPVVJbnQ2NCgoMioqNjQpIC0gMSksCiAgICAvLyAgICAgZGVjaW1hbHM9MCwKICAgIC8vICAgICBtYW5hZ2VyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgcmVzZXJ2ZT1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gICAgIGRlZmF1bHRfZnJvemVuPUZhbHNlLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gY29udHJhY3QucHk6NzAKICAgIC8vIG1hbmFnZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICAvLyBjb250cmFjdC5weTo3MQogICAgLy8gcmVzZXJ2ZT1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgZHVwCiAgICAvLyBjb250cmFjdC5weTo3MgogICAgLy8gZGVmYXVsdF9mcm96ZW49RmFsc2UsCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBDb25maWdBc3NldERlZmF1bHRGcm96ZW4KICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRSZXNlcnZlCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TWFuYWdlcgogICAgLy8gY29udHJhY3QucHk6NjkKICAgIC8vIGRlY2ltYWxzPTAsCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBDb25maWdBc3NldERlY2ltYWxzCiAgICAvLyBjb250cmFjdC5weTo2OAogICAgLy8gdG90YWw9VUludDY0KCgyKio2NCkgLSAxKSwKICAgIHB1c2hpbnQgMTg0NDY3NDQwNzM3MDk1NTE2MTUgLy8gMTg0NDY3NDQwNzM3MDk1NTE2MTUKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRUb3RhbAogICAgLy8gY29udHJhY3QucHk6NjcKICAgIC8vIHVuaXRfbmFtZT0nRUNPJywKICAgIGJ5dGVjIDkgLy8gIkVDTyIKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRVbml0TmFtZQogICAgLy8gY29udHJhY3QucHk6NjYKICAgIC8vIGFzc2V0X25hbWU9J0VDTycsCiAgICBieXRlYyA5IC8vICJFQ08iCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TmFtZQogICAgLy8gY29udHJhY3QucHk6NjUKICAgIC8vIGNyZWF0ZV9lY29fdHhuID0gaXR4bi5Bc3NldENvbmZpZygKICAgIGludGNfMiAvLyBhY2ZnCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIGNvbnRyYWN0LnB5OjY1LTczCiAgICAvLyBjcmVhdGVfZWNvX3R4biA9IGl0eG4uQXNzZXRDb25maWcoCiAgICAvLyAgICAgYXNzZXRfbmFtZT0nRUNPJywKICAgIC8vICAgICB1bml0X25hbWU9J0VDTycsCiAgICAvLyAgICAgdG90YWw9VUludDY0KCgyKio2NCkgLSAxKSwKICAgIC8vICAgICBkZWNpbWFscz0wLAogICAgLy8gICAgIG1hbmFnZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIC8vICAgICByZXNlcnZlPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgZGVmYXVsdF9mcm96ZW49RmFsc2UsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gY29udHJhY3QucHk6NzYKICAgIC8vIHNlbGYuZWNvX3Rva2VuID0gY3JlYXRlX2Vjb190eG4uY3JlYXRlZF9hc3NldC5pZAogICAgYnl0ZWNfMSAvLyAiZWNvX3Rva2VuIgogICAgaXR4biBDcmVhdGVkQXNzZXRJRAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIGNvbnRyYWN0LnB5OjEwCiAgICAvLyByZXR1cm4gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcy5taW5fYmFsYW5jZQogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIGFjY3RfcGFyYW1zX2dldCBBY2N0TWluQmFsYW5jZQogICAgYXNzZXJ0IC8vIGFjY291bnQgZnVuZGVkCiAgICAvLyBjb250cmFjdC5weTo4NQogICAgLy8gcmVmdW5kX2V4Y2Vzc19tYnIocHJlX21iciwgcG9zdF9tYnIsIG1icl9wYXltZW50KQogICAgdW5jb3ZlciAyCiAgICBjYWxsc3ViIHJlZnVuZF9leGNlc3NfbWJyCiAgICAvLyBjb250cmFjdC5weTo4NgogICAgLy8gcmV0dXJuIHNlbGYuZWNvX3Rva2VuCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAiZWNvX3Rva2VuIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmVjb190b2tlbiBleGlzdHMKICAgIC8vIGNvbnRyYWN0LnB5OjU4CiAgICAvLyBAYWJpbWV0aG9kCiAgICBpdG9iCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBjb250cmFjdC5FY28uYm9vdHN0cmFwX3ZpYV9vdXRlcl9hbmRfYWRkX2luaXRpYWxfbGlxdWlkaXR5W3JvdXRpbmddKCkgLT4gdm9pZDoKYm9vdHN0cmFwX3ZpYV9vdXRlcl9hbmRfYWRkX2luaXRpYWxfbGlxdWlkaXR5OgogICAgYnl0ZWNfMyAvLyAiIgogICAgZHVwCiAgICAvLyBjb250cmFjdC5weTo5MQogICAgLy8gQGFiaW1ldGhvZAogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMSAvLyAxCiAgICAtCiAgICBkdXAKICAgIC8vIGNvbnRyYWN0LnB5Ojk4CiAgICAvLyBpc19jcmVhdG9yKCkKICAgIGNhbGxzdWIgaXNfY3JlYXRvcgogICAgLy8gY29udHJhY3QucHk6OTkKICAgIC8vIGNvbnRyYWN0X2lzX3JlY2VpdmVyKG1icl9wYXltZW50KQogICAgZHVwCiAgICBjYWxsc3ViIGNvbnRyYWN0X2lzX3JlY2VpdmVyCiAgICAvLyBjb250cmFjdC5weToyMgogICAgLy8gYXNzZXJ0IHR4bi50eXBlID09IFRyYW5zYWN0aW9uVHlwZS5QYXltZW50CiAgICBndHhucyBUeXBlRW51bQogICAgaW50Y18xIC8vIHBheQogICAgPT0KICAgIGFzc2VydAogICAgLy8gY29udHJhY3QucHk6MTAKICAgIC8vIHJldHVybiBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLm1pbl9iYWxhbmNlCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgYWNjdF9wYXJhbXNfZ2V0IEFjY3RNaW5CYWxhbmNlCiAgICBhc3NlcnQgLy8gYWNjb3VudCBmdW5kZWQKICAgIC8vIGNvbnRyYWN0LnB5OjI2NQogICAgLy8gcHJvZ3JhbV9ieXRlcyA9IHNlbGYucG9vbF9sb2dpY3NpZ190ZW1wbGF0ZQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDYgLy8gInBvb2xfbG9naWNzaWdfdGVtcGxhdGUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucG9vbF9sb2dpY3NpZ190ZW1wbGF0ZSBleGlzdHMKICAgIC8vIGNvbnRyYWN0LnB5OjI2OAogICAgLy8gcHJvZ3JhbV9ieXRlc1swOjNdICsKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzAgLy8gMAogICAgZGlnIDEKICAgID49CiAgICBpbnRjXzAgLy8gMAogICAgZGlnIDIKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICBpbnRjXzIgLy8gMwogICAgZGlnIDIKICAgID49CiAgICBpbnRjXzIgLy8gMwogICAgZGlnIDMKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICBkaWcgMwogICAgY292ZXIgMgogICAgc3Vic3RyaW5nMwogICAgLy8gY29udHJhY3QucHk6MjY5CiAgICAvLyBhcmM0LlVJbnQ2NChzZWxmLnRpbnltYW5fcm91dGVyLmlkKS5ieXRlcyArCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNyAvLyAidGlueW1hbl9yb3V0ZXIiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudGlueW1hbl9yb3V0ZXIgZXhpc3RzCiAgICBkdXAKICAgIGl0b2IKICAgIC8vIGNvbnRyYWN0LnB5OjI2OC0yNjkKICAgIC8vIHByb2dyYW1fYnl0ZXNbMDozXSArCiAgICAvLyBhcmM0LlVJbnQ2NChzZWxmLnRpbnltYW5fcm91dGVyLmlkKS5ieXRlcyArCiAgICB1bmNvdmVyIDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3QucHk6MjcwCiAgICAvLyBhcmM0LlVJbnQ2NChzZWxmLmVjb190b2tlbikuYnl0ZXMgKwogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gImVjb190b2tlbiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5lY29fdG9rZW4gZXhpc3RzCiAgICBkdXAKICAgIGl0b2IKICAgIC8vIGNvbnRyYWN0LnB5OjI2OC0yNzAKICAgIC8vIHByb2dyYW1fYnl0ZXNbMDozXSArCiAgICAvLyBhcmM0LlVJbnQ2NChzZWxmLnRpbnltYW5fcm91dGVyLmlkKS5ieXRlcyArCiAgICAvLyBhcmM0LlVJbnQ2NChzZWxmLmVjb190b2tlbikuYnl0ZXMgKwogICAgdW5jb3ZlciAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0LnB5OjI3MQogICAgLy8gYXJjNC5VSW50NjQoMCkuYnl0ZXMgKwogICAgYnl0ZWMgMTAgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBjb250cmFjdC5weToyNjgtMjcxCiAgICAvLyBwcm9ncmFtX2J5dGVzWzA6M10gKwogICAgLy8gYXJjNC5VSW50NjQoc2VsZi50aW55bWFuX3JvdXRlci5pZCkuYnl0ZXMgKwogICAgLy8gYXJjNC5VSW50NjQoc2VsZi5lY29fdG9rZW4pLmJ5dGVzICsKICAgIC8vIGFyYzQuVUludDY0KDApLmJ5dGVzICsKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3QucHk6MjcyCiAgICAvLyBwcm9ncmFtX2J5dGVzWzI3Ol0KICAgIHB1c2hpbnQgMjcgLy8gMjcKICAgIGRpZyA0CiAgICA+PQogICAgcHVzaGludCAyNyAvLyAyNwogICAgZGlnIDUKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICB1bmNvdmVyIDUKICAgIHN3YXAKICAgIHVuY292ZXIgNQogICAgc3Vic3RyaW5nMwogICAgLy8gY29udHJhY3QucHk6MjY4LTI3MgogICAgLy8gcHJvZ3JhbV9ieXRlc1swOjNdICsKICAgIC8vIGFyYzQuVUludDY0KHNlbGYudGlueW1hbl9yb3V0ZXIuaWQpLmJ5dGVzICsKICAgIC8vIGFyYzQuVUludDY0KHNlbGYuZWNvX3Rva2VuKS5ieXRlcyArCiAgICAvLyBhcmM0LlVJbnQ2NCgwKS5ieXRlcyArCiAgICAvLyBwcm9ncmFtX2J5dGVzWzI3Ol0KICAgIGNvbmNhdAogICAgLy8gY29udHJhY3QucHk6Mjc1CiAgICAvLyByZXR1cm4gQWNjb3VudC5mcm9tX2J5dGVzKG9wLnNoYTUxMl8yNTYoYidQcm9ncmFtJyArIHByb2dyYW1fYnl0ZXMpKQogICAgcHVzaGJ5dGVzIDB4NTA3MjZmNjc3MjYxNmQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgc2hhNTEyXzI1NgogICAgLy8gY29udHJhY3QucHk6MTYyCiAgICAvLyBMUF90b2tlbl9pZCA9IEFzc2V0KG9wLkFwcExvY2FsLmdldF9leF91aW50NjQocG9vbF9hZGRyZXNzLCBzZWxmLnRpbnltYW5fcm91dGVyLCBiJ3Bvb2xfdG9rZW5fYXNzZXRfaWQnKVswXSkKICAgIGR1cAogICAgZGlnIDMKICAgIHB1c2hieXRlcyAweDcwNmY2ZjZjNWY3NDZmNmI2NTZlNWY2MTczNzM2NTc0NWY2OTY0CiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBwb3AKICAgIC8vIGNvbnRyYWN0LnB5OjE0NgogICAgLy8gb3B0aW5fbHAgPSBpdHhuLkFzc2V0VHJhbnNmZXIoeGZlcl9hc3NldD1MUF90b2tlbiwgYXNzZXRfcmVjZWl2ZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcykKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICAvLyBjb250cmFjdC5weToxNTcKICAgIC8vIGl0eG4uc3VibWl0X3R4bnMob3B0aW5fbHAsIHRyYW5zZmVyX2Fzc2V0LCB0cmFuc2Zlcl9hbGdvLCBhZGRfbHBfY2FsbCkKICAgIGl0eG5fYmVnaW4KICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgZHVwCiAgICBpdHhuX2ZpZWxkIFhmZXJBc3NldAogICAgLy8gY29udHJhY3QucHk6MTQ2CiAgICAvLyBvcHRpbl9scCA9IGl0eG4uQXNzZXRUcmFuc2Zlcih4ZmVyX2Fzc2V0PUxQX3Rva2VuLCBhc3NldF9yZWNlaXZlcj1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzKQogICAgaW50Y18zIC8vIGF4ZmVyCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIGNvbnRyYWN0LnB5OjE1NwogICAgLy8gaXR4bi5zdWJtaXRfdHhucyhvcHRpbl9scCwgdHJhbnNmZXJfYXNzZXQsIHRyYW5zZmVyX2FsZ28sIGFkZF9scF9jYWxsKQogICAgaXR4bl9uZXh0CiAgICAvLyBjb250cmFjdC5weToxNDcKICAgIC8vIHRyYW5zZmVyX2Fzc2V0ID0gaXR4bi5Bc3NldFRyYW5zZmVyKHhmZXJfYXNzZXQ9c2VsZi5lY29fdG9rZW4sIGFzc2V0X3JlY2VpdmVyPXBvb2xfYWRkcmVzcywgYXNzZXRfYW1vdW50PTIqKjY0IC8vIDIpCiAgICBwdXNoaW50IDkyMjMzNzIwMzY4NTQ3NzU4MDggLy8gOTIyMzM3MjAzNjg1NDc3NTgwOAogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgZGlnIDEKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgdW5jb3ZlciAyCiAgICBpdHhuX2ZpZWxkIFhmZXJBc3NldAogICAgaW50Y18zIC8vIGF4ZmVyCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIGNvbnRyYWN0LnB5OjE1NwogICAgLy8gaXR4bi5zdWJtaXRfdHhucyhvcHRpbl9scCwgdHJhbnNmZXJfYXNzZXQsIHRyYW5zZmVyX2FsZ28sIGFkZF9scF9jYWxsKQogICAgaXR4bl9uZXh0CiAgICAvLyBjb250cmFjdC5weToxNDgKICAgIC8vIHRyYW5zZmVyX2FsZ28gPSBpdHhuLlBheW1lbnQocmVjZWl2ZXI9cG9vbF9hZGRyZXNzLCBhbW91bnQ9MV8wMDBfMDAwKQogICAgaW50YyA0IC8vIDEwMDAwMDAKICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICBkaWcgMQogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgaW50Y18xIC8vIHBheQogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBjb250cmFjdC5weToxNTcKICAgIC8vIGl0eG4uc3VibWl0X3R4bnMob3B0aW5fbHAsIHRyYW5zZmVyX2Fzc2V0LCB0cmFuc2Zlcl9hbGdvLCBhZGRfbHBfY2FsbCkKICAgIGl0eG5fbmV4dAogICAgc3dhcAogICAgaXR4bl9maWVsZCBBY2NvdW50cwogICAgZHVwCiAgICBpdHhuX2ZpZWxkIEFzc2V0cwogICAgLy8gY29udHJhY3QucHk6MTQ5CiAgICAvLyB0aW55X2FyZ3MgPSBCeXRlcyhiJ2FkZF9pbml0aWFsX2xpcXVpZGl0eScpCiAgICBwdXNoYnl0ZXMgMHg2MTY0NjQ1ZjY5NmU2OTc0Njk2MTZjNWY2YzY5NzE3NTY5NjQ2OTc0NzkKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICAvLyBjb250cmFjdC5weToxNTIKICAgIC8vIG9uX2NvbXBsZXRpb249T25Db21wbGV0ZUFjdGlvbi5Ob09wLAogICAgaW50Y18wIC8vIE5vT3AKICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBzd2FwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIC8vIGNvbnRyYWN0LnB5OjE1MAogICAgLy8gYWRkX2xwX2NhbGwgPSBpdHhuLkFwcGxpY2F0aW9uQ2FsbCgKICAgIHB1c2hpbnQgNiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIGNvbnRyYWN0LnB5OjE1NwogICAgLy8gaXR4bi5zdWJtaXRfdHhucyhvcHRpbl9scCwgdHJhbnNmZXJfYXNzZXQsIHRyYW5zZmVyX2FsZ28sIGFkZF9scF9jYWxsKQogICAgaXR4bl9zdWJtaXQKICAgIC8vIGNvbnRyYWN0LnB5OjEwNS0xMDYKICAgIC8vICMgc2VsZi5pc19ib290c3RyYXBwaW5nKHBvb2xfYWRkcmVzcywgYm9vdHN0cmFwX2ZlZSwgYm9vdHN0cmFwX3R4KQogICAgLy8gc2VsZi5lY29fbHBfdG9rZW4gPSBzZWxmLmFkZF9pbml0aWFsX2xpcXVpZGl0eShwb29sX2FkZHJlc3MpCiAgICBieXRlYyA0IC8vICJlY29fbHBfdG9rZW4iCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gY29udHJhY3QucHk6MTY3CiAgICAvLyBwbG90X2NvdW50X2FzX3N0cmluZyA9IGl0b2Eoc2VsZi5wbG90X2NvdW50KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzIgLy8gInBsb3RfY291bnQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucGxvdF9jb3VudCBleGlzdHMKICAgIGNhbGxzdWIgaXRvYQogICAgZHVwCiAgICAvLyBjb250cmFjdC5weToxNjgKICAgIC8vIHBsb3RfY291bnRfd2l0aF9jb21tYXMgPSBCeXRlcyhiJycpCiAgICBieXRlY18zIC8vIDB4CiAgICBzd2FwCiAgICAvLyBjb250cmFjdC5weToxNzAKICAgIC8vIGlmIHBsb3RfY291bnRfYXNfc3RyaW5nLmxlbmd0aCA8PSAzOgogICAgbGVuCiAgICBkdXAKICAgIGludGNfMiAvLyAzCiAgICA8PQogICAgYnogYm9vdHN0cmFwX3ZpYV9vdXRlcl9hbmRfYWRkX2luaXRpYWxfbGlxdWlkaXR5X2Vsc2VfYm9keUA3CiAgICBkaWcgMgogICAgYnVyeSAyCgpib290c3RyYXBfdmlhX291dGVyX2FuZF9hZGRfaW5pdGlhbF9saXF1aWRpdHlfYWZ0ZXJfaWZfZWxzZUAxMzoKICAgIC8vIGNvbnRyYWN0LnB5OjE4MS0xODkKICAgIC8vIGNyZWF0ZV9pbml0aWFsX3Bsb3QgPSBpdHhuLkFzc2V0Q29uZmlnKAogICAgLy8gICAgIGFzc2V0X25hbWU9YidQbG90ICM6ICcgKyBwbG90X2NvdW50X3dpdGhfY29tbWFzLAogICAgLy8gICAgIHVuaXRfbmFtZT0nUExPVCcsCiAgICAvLyAgICAgdG90YWw9MSwKICAgIC8vICAgICBkZWNpbWFscz0wLAogICAgLy8gICAgIG1hbmFnZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIC8vICAgICByZXNlcnZlPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgZGVmYXVsdF9mcm96ZW49RmFsc2UsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBjb250cmFjdC5weToxODIKICAgIC8vIGFzc2V0X25hbWU9YidQbG90ICM6ICcgKyBwbG90X2NvdW50X3dpdGhfY29tbWFzLAogICAgYnl0ZWMgMTEgLy8gMHg1MDZjNmY3NDIwMjMzYTIwCiAgICBkaWcgMgogICAgY29uY2F0CiAgICAvLyBjb250cmFjdC5weToxODYKICAgIC8vIG1hbmFnZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICAvLyBjb250cmFjdC5weToxODcKICAgIC8vIHJlc2VydmU9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIGR1cAogICAgLy8gY29udHJhY3QucHk6MTg4CiAgICAvLyBkZWZhdWx0X2Zyb3plbj1GYWxzZSwKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0RGVmYXVsdEZyb3plbgogICAgaXR4bl9maWVsZCBDb25maWdBc3NldFJlc2VydmUKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRNYW5hZ2VyCiAgICAvLyBjb250cmFjdC5weToxODUKICAgIC8vIGRlY2ltYWxzPTAsCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBDb25maWdBc3NldERlY2ltYWxzCiAgICAvLyBjb250cmFjdC5weToxODQKICAgIC8vIHRvdGFsPTEsCiAgICBpbnRjXzEgLy8gMQogICAgaXR4bl9maWVsZCBDb25maWdBc3NldFRvdGFsCiAgICAvLyBjb250cmFjdC5weToxODMKICAgIC8vIHVuaXRfbmFtZT0nUExPVCcsCiAgICBieXRlYyAxMiAvLyAiUExPVCIKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRVbml0TmFtZQogICAgaXR4bl9maWVsZCBDb25maWdBc3NldE5hbWUKICAgIC8vIGNvbnRyYWN0LnB5OjE4MQogICAgLy8gY3JlYXRlX2luaXRpYWxfcGxvdCA9IGl0eG4uQXNzZXRDb25maWcoCiAgICBpbnRjXzIgLy8gYWNmZwogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBjb250cmFjdC5weToxODEtMTg5CiAgICAvLyBjcmVhdGVfaW5pdGlhbF9wbG90ID0gaXR4bi5Bc3NldENvbmZpZygKICAgIC8vICAgICBhc3NldF9uYW1lPWInUGxvdCAjOiAnICsgcGxvdF9jb3VudF93aXRoX2NvbW1hcywKICAgIC8vICAgICB1bml0X25hbWU9J1BMT1QnLAogICAgLy8gICAgIHRvdGFsPTEsCiAgICAvLyAgICAgZGVjaW1hbHM9MCwKICAgIC8vICAgICBtYW5hZ2VyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgcmVzZXJ2ZT1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gICAgIGRlZmF1bHRfZnJvemVuPUZhbHNlLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIC8vIGNvbnRyYWN0LnB5OjEwOAogICAgLy8gc2VsZi5uZXh0X3Bsb3QgPSBzZWxmLm1pbnRfaW5pdGlhbF9wbG90KCkKICAgIGJ5dGVjXzAgLy8gIm5leHRfcGxvdCIKICAgIGl0eG4gQ3JlYXRlZEFzc2V0SUQKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBjb250cmFjdC5weToxMAogICAgLy8gcmV0dXJuIEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MubWluX2JhbGFuY2UKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBhY2N0X3BhcmFtc19nZXQgQWNjdE1pbkJhbGFuY2UKICAgIGFzc2VydCAvLyBhY2NvdW50IGZ1bmRlZAogICAgLy8gY29udHJhY3QucHk6MTEwCiAgICAvLyBwb3N0X21iciA9IGdldF9tYnIoKSArIDFfMDAwXzAwMCAjIEFkZCAxIEFsZ28gZm9yIHRoZSBpbml0aWFsIGxpcXVpZGl0eSBhZGQgZmVlCiAgICBpbnRjIDQgLy8gMTAwMDAwMAogICAgKwogICAgLy8gY29udHJhY3QucHk6MTExCiAgICAvLyByZWZ1bmRfZXhjZXNzX21icihwcmVfbWJyLCBwb3N0X21iciwgbWJyX3BheW1lbnQpCiAgICBkaWcgNAogICAgc3dhcAogICAgZGlnIDYKICAgIGNhbGxzdWIgcmVmdW5kX2V4Y2Vzc19tYnIKICAgIC8vIGNvbnRyYWN0LnB5OjkxCiAgICAvLyBAYWJpbWV0aG9kCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgpib290c3RyYXBfdmlhX291dGVyX2FuZF9hZGRfaW5pdGlhbF9saXF1aWRpdHlfZWxzZV9ib2R5QDc6CiAgICAvLyBjb250cmFjdC5weToxNzMKICAgIC8vIGN1cnNvciA9IFVJbnQ2NCgwKQogICAgaW50Y18wIC8vIDAKICAgIGJ1cnkgNwogICAgLy8gY29udHJhY3QucHk6MTc0CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UocGxvdF9jb3VudF9hc19zdHJpbmcubGVuZ3RoKToKICAgIGludGNfMCAvLyAwCiAgICBidXJ5IDYKCmJvb3RzdHJhcF92aWFfb3V0ZXJfYW5kX2FkZF9pbml0aWFsX2xpcXVpZGl0eV9mb3JfaGVhZGVyQDg6CiAgICAvLyBjb250cmFjdC5weToxNzQKICAgIC8vIGZvciBpIGluIHVyYW5nZShwbG90X2NvdW50X2FzX3N0cmluZy5sZW5ndGgpOgogICAgZGlnIDUKICAgIGRpZyAxCiAgICA8CiAgICBieiBib290c3RyYXBfdmlhX291dGVyX2FuZF9hZGRfaW5pdGlhbF9saXF1aWRpdHlfYWZ0ZXJfaWZfZWxzZUAxMwogICAgLy8gY29udHJhY3QucHk6MTc1CiAgICAvLyBjdXJzb3IgKz0gMQogICAgZGlnIDYKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBkdXAKICAgIGJ1cnkgOAogICAgLy8gY29udHJhY3QucHk6MTc2CiAgICAvLyBpZiBjdXJzb3IgPT0gMzoKICAgIGludGNfMiAvLyAzCiAgICA9PQogICAgYnogYm9vdHN0cmFwX3ZpYV9vdXRlcl9hbmRfYWRkX2luaXRpYWxfbGlxdWlkaXR5X2FmdGVyX2lmX2Vsc2VAMTEKICAgIC8vIGNvbnRyYWN0LnB5OjE3NwogICAgLy8gcGxvdF9jb3VudF93aXRoX2NvbW1hcyA9IHBsb3RfY291bnRfd2l0aF9jb21tYXMgKyBiJywnCiAgICBkaWcgMQogICAgcHVzaGJ5dGVzIDB4MmMKICAgIGNvbmNhdAogICAgYnVyeSAyCiAgICAvLyBjb250cmFjdC5weToxNzgKICAgIC8vIGN1cnNvciA9IFVJbnQ2NCgwKQogICAgaW50Y18wIC8vIDAKICAgIGJ1cnkgNwoKYm9vdHN0cmFwX3ZpYV9vdXRlcl9hbmRfYWRkX2luaXRpYWxfbGlxdWlkaXR5X2FmdGVyX2lmX2Vsc2VAMTE6CiAgICAvLyBjb250cmFjdC5weToxNzkKICAgIC8vIHBsb3RfY291bnRfd2l0aF9jb21tYXMgPSBwbG90X2NvdW50X3dpdGhfY29tbWFzICsgcGxvdF9jb3VudF9hc19zdHJpbmdbaV0KICAgIGRpZyAyCiAgICBkaWcgNgogICAgZHVwCiAgICBjb3ZlciAyCiAgICBpbnRjXzEgLy8gMQogICAgZXh0cmFjdDMKICAgIGRpZyAzCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ1cnkgMwogICAgLy8gY29udHJhY3QucHk6MTc0CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UocGxvdF9jb3VudF9hc19zdHJpbmcubGVuZ3RoKToKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBidXJ5IDYKICAgIGIgYm9vdHN0cmFwX3ZpYV9vdXRlcl9hbmRfYWRkX2luaXRpYWxfbGlxdWlkaXR5X2Zvcl9oZWFkZXJAOAoKCi8vIGNvbnRyYWN0LkVjby5taW50X3Bsb3Rbcm91dGluZ10oKSAtPiB2b2lkOgptaW50X3Bsb3Q6CiAgICBpbnRjXzAgLy8gMAogICAgZHVwCiAgICBieXRlY18zIC8vICIiCiAgICBkdXBuIDIKICAgIC8vIGNvbnRyYWN0LnB5OjE5NAogICAgLy8gQGFiaW1ldGhvZAogICAgdHhuIEdyb3VwSW5kZXgKICAgIHB1c2hpbnQgMiAvLyAyCiAgICAtCiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50Y18xIC8vIDEKICAgIC0KICAgIGR1cAogICAgY292ZXIgMgogICAgLy8gY29udHJhY3QucHk6MTk2CiAgICAvLyBjb250cmFjdF9pc19yZWNlaXZlcihwbG90X3BheW1lbnQpCiAgICBkaWcgMQogICAgY2FsbHN1YiBjb250cmFjdF9pc19yZWNlaXZlcgogICAgLy8gY29udHJhY3QucHk6MTk3CiAgICAvLyBjb250cmFjdF9pc19yZWNlaXZlcihtYnJfcGF5bWVudCkKICAgIGR1cAogICAgY2FsbHN1YiBjb250cmFjdF9pc19yZWNlaXZlcgogICAgLy8gY29udHJhY3QucHk6MjIKICAgIC8vIGFzc2VydCB0eG4udHlwZSA9PSBUcmFuc2FjdGlvblR5cGUuUGF5bWVudAogICAgZGlnIDEKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0CiAgICBndHhucyBUeXBlRW51bQogICAgaW50Y18xIC8vIHBheQogICAgPT0KICAgIGFzc2VydAogICAgLy8gY29udHJhY3QucHk6MjQ2CiAgICAvLyBhc3NlcnQgdHhuLnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIGR1cAogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBjb250cmFjdC5weToyNDcKICAgIC8vIGFzc2VydCB0eG4uYW1vdW50ID09IHNlbGYucGxvdF9jb3N0CiAgICBndHhucyBBbW91bnQKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA1IC8vICJwbG90X2Nvc3QiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucGxvdF9jb3N0IGV4aXN0cwogICAgPT0KICAgIGFzc2VydAogICAgLy8gY29udHJhY3QucHk6MTAKICAgIC8vIHJldHVybiBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLm1pbl9iYWxhbmNlCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgYWNjdF9wYXJhbXNfZ2V0IEFjY3RNaW5CYWxhbmNlCiAgICBhc3NlcnQgLy8gYWNjb3VudCBmdW5kZWQKICAgIC8vIGNvbnRyYWN0LnB5OjI1MQogICAgLy8gYm94ID0gQm94KEJ5dGVzLCBrZXk9YidwJyArIFR4bi5zZW5kZXIuYnl0ZXMpICMgcCBwcmVmaXggZm9yIHBsb3RzCiAgICBwdXNoYnl0ZXMgMHg3MAogICAgdHhuIFNlbmRlcgogICAgY29uY2F0CiAgICBkdXAKICAgIC8vIGNvbnRyYWN0LnB5OjI1MgogICAgLy8gcGxvdF9pbmZvID0gUGxvdEluZm8ocGxvdF9pZD1hcmM0LlVJbnQ2NChzZWxmLm5leHRfcGxvdCksIHBsb3RfbGFzdF9jbGFpbV90aW1lPWFyYzQuVUludDY0KDApKQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gIm5leHRfcGxvdCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5uZXh0X3Bsb3QgZXhpc3RzCiAgICBpdG9iCiAgICBieXRlYyAxMCAvLyAweDAwMDAwMDAwMDAwMDAwMDAKICAgIGNvbmNhdAogICAgc3dhcAogICAgLy8gY29udHJhY3QucHk6MjUzCiAgICAvLyBpZiBib3g6CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJ6IG1pbnRfcGxvdF9lbHNlX2JvZHlAMTUKICAgIC8vIGNvbnRyYWN0LnB5OjI1NAogICAgLy8gaW5pdGlhbF9ib3hfbGVuZ3RoID0gYm94Lmxlbmd0aAogICAgZGlnIDEKICAgIGR1cAogICAgYm94X2xlbgogICAgYXNzZXJ0IC8vIGNoZWNrIEJveCBleGlzdHMKICAgIC8vIGNvbnRyYWN0LnB5OjI1NQogICAgLy8gYm94LnJlc2l6ZShpbml0aWFsX2JveF9sZW5ndGggKyAxNikKICAgIGR1cAogICAgcHVzaGludCAxNiAvLyAxNgogICAgKwogICAgZGlnIDIKICAgIHN3YXAKICAgIGJveF9yZXNpemUKICAgIC8vIGNvbnRyYWN0LnB5OjI1NgogICAgLy8gYm94LnNwbGljZShpbml0aWFsX2JveF9sZW5ndGgsIDE2LCBwbG90X2luZm8uYnl0ZXMpCiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICB1bmNvdmVyIDMKICAgIGJveF9zcGxpY2UKCm1pbnRfcGxvdF9hZnRlcl9pZl9lbHNlQDE2OgogICAgLy8gY29udHJhY3QucHk6MjA1CiAgICAvLyBzZWxmLnBsb3RfY291bnQgKz0gMQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzIgLy8gInBsb3RfY291bnQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucGxvdF9jb3VudCBleGlzdHMKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBieXRlY18yIC8vICJwbG90X2NvdW50IgogICAgZGlnIDEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBjb250cmFjdC5weToyMDcKICAgIC8vIHBsb3RfY291bnRfYXNfc3RyaW5nID0gaXRvYShzZWxmLnBsb3RfY291bnQpCiAgICBjYWxsc3ViIGl0b2EKICAgIGR1cAogICAgYnVyeSA5CiAgICAvLyBjb250cmFjdC5weToyMDgKICAgIC8vIHBsb3RfY291bnRfd2l0aF9jb21tYXMgPSBCeXRlcyhiJycpCiAgICBieXRlY18zIC8vIDB4CiAgICBidXJ5IDgKICAgIC8vIGNvbnRyYWN0LnB5OjIxMAogICAgLy8gaWYgcGxvdF9jb3VudF9hc19zdHJpbmcubGVuZ3RoIDw9IDM6CiAgICBsZW4KICAgIGR1cAogICAgYnVyeSA1CiAgICBpbnRjXzIgLy8gMwogICAgPD0KICAgIGJ6IG1pbnRfcGxvdF9lbHNlX2JvZHlAMwogICAgZGlnIDcKICAgIGJ1cnkgNwoKbWludF9wbG90X2FmdGVyX2lmX2Vsc2VAMTA6CiAgICAvLyBjb250cmFjdC5weToyMjEtMjI5CiAgICAvLyBjcmVhdGVfbmV4dF91c2Vyc19wbG90ID0gaXR4bi5Bc3NldENvbmZpZygKICAgIC8vICAgICBhc3NldF9uYW1lPWInUGxvdCAjOiAnICsgcGxvdF9jb3VudF93aXRoX2NvbW1hcywKICAgIC8vICAgICB1bml0X25hbWU9J1BMT1QnLAogICAgLy8gICAgIHRvdGFsPTEsCiAgICAvLyAgICAgZGVjaW1hbHM9MCwKICAgIC8vICAgICBtYW5hZ2VyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgcmVzZXJ2ZT1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gICAgIGRlZmF1bHRfZnJvemVuPUZhbHNlLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gY29udHJhY3QucHk6MjIyCiAgICAvLyBhc3NldF9uYW1lPWInUGxvdCAjOiAnICsgcGxvdF9jb3VudF93aXRoX2NvbW1hcywKICAgIGJ5dGVjIDExIC8vIDB4NTA2YzZmNzQyMDIzM2EyMAogICAgZGlnIDcKICAgIGNvbmNhdAogICAgLy8gY29udHJhY3QucHk6MjI2CiAgICAvLyBtYW5hZ2VyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgLy8gY29udHJhY3QucHk6MjI3CiAgICAvLyByZXNlcnZlPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICBkdXAKICAgIC8vIGNvbnRyYWN0LnB5OjIyOAogICAgLy8gZGVmYXVsdF9mcm96ZW49RmFsc2UsCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBDb25maWdBc3NldERlZmF1bHRGcm96ZW4KICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRSZXNlcnZlCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TWFuYWdlcgogICAgLy8gY29udHJhY3QucHk6MjI1CiAgICAvLyBkZWNpbWFscz0wLAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXREZWNpbWFscwogICAgLy8gY29udHJhY3QucHk6MjI0CiAgICAvLyB0b3RhbD0xLAogICAgaW50Y18xIC8vIDEKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXRUb3RhbAogICAgLy8gY29udHJhY3QucHk6MjIzCiAgICAvLyB1bml0X25hbWU9J1BMT1QnLAogICAgYnl0ZWMgMTIgLy8gIlBMT1QiCiAgICBpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VW5pdE5hbWUKICAgIGl0eG5fZmllbGQgQ29uZmlnQXNzZXROYW1lCiAgICAvLyBjb250cmFjdC5weToyMjEKICAgIC8vIGNyZWF0ZV9uZXh0X3VzZXJzX3Bsb3QgPSBpdHhuLkFzc2V0Q29uZmlnKAogICAgaW50Y18yIC8vIGFjZmcKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gY29udHJhY3QucHk6MjIxLTIyOQogICAgLy8gY3JlYXRlX25leHRfdXNlcnNfcGxvdCA9IGl0eG4uQXNzZXRDb25maWcoCiAgICAvLyAgICAgYXNzZXRfbmFtZT1iJ1Bsb3QgIzogJyArIHBsb3RfY291bnRfd2l0aF9jb21tYXMsCiAgICAvLyAgICAgdW5pdF9uYW1lPSdQTE9UJywKICAgIC8vICAgICB0b3RhbD0xLAogICAgLy8gICAgIGRlY2ltYWxzPTAsCiAgICAvLyAgICAgbWFuYWdlcj1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gICAgIHJlc2VydmU9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIC8vICAgICBkZWZhdWx0X2Zyb3plbj1GYWxzZSwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIENyZWF0ZWRBc3NldElECiAgICAvLyBjb250cmFjdC5weToyMzItMjM2CiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PTEsCiAgICAvLyAgICAgYXNzZXRfcmVjZWl2ZXI9VHhuLnNlbmRlciwKICAgIC8vICAgICB4ZmVyX2Fzc2V0PXNlbGYubmV4dF9wbG90LAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gY29udHJhY3QucHk6MjM0CiAgICAvLyBhc3NldF9yZWNlaXZlcj1UeG4uc2VuZGVyLAogICAgdHhuIFNlbmRlcgogICAgLy8gY29udHJhY3QucHk6MjM1CiAgICAvLyB4ZmVyX2Fzc2V0PXNlbGYubmV4dF9wbG90LAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gIm5leHRfcGxvdCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5uZXh0X3Bsb3QgZXhpc3RzCiAgICBpdHhuX2ZpZWxkIFhmZXJBc3NldAogICAgaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCiAgICAvLyBjb250cmFjdC5weToyMzMKICAgIC8vIGFzc2V0X2Ftb3VudD0xLAogICAgaW50Y18xIC8vIDEKICAgIGl0eG5fZmllbGQgQXNzZXRBbW91bnQKICAgIC8vIGNvbnRyYWN0LnB5OjIzMgogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgaW50Y18zIC8vIGF4ZmVyCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIGNvbnRyYWN0LnB5OjIzMi0yMzYKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICBhc3NldF9hbW91bnQ9MSwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1UeG4uc2VuZGVyLAogICAgLy8gICAgIHhmZXJfYXNzZXQ9c2VsZi5uZXh0X3Bsb3QsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gY29udHJhY3QucHk6MjM4CiAgICAvLyBzZWxmLm5leHRfcGxvdCA9IGNyZWF0ZV9uZXh0X3VzZXJzX3Bsb3QuY3JlYXRlZF9hc3NldC5pZAogICAgYnl0ZWNfMCAvLyAibmV4dF9wbG90IgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIGNvbnRyYWN0LnB5OjEwCiAgICAvLyByZXR1cm4gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcy5taW5fYmFsYW5jZQogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIGFjY3RfcGFyYW1zX2dldCBBY2N0TWluQmFsYW5jZQogICAgYXNzZXJ0IC8vIGFjY291bnQgZnVuZGVkCiAgICAvLyBjb250cmFjdC5weToyNDEKICAgIC8vIHJlZnVuZF9leGNlc3NfbWJyKHByZV9tYnIsIHBvc3RfbWJyLCBtYnJfcGF5bWVudCkKICAgIGRpZyAyCiAgICBzd2FwCiAgICBkaWcgNAogICAgY2FsbHN1YiByZWZ1bmRfZXhjZXNzX21icgogICAgLy8gY29udHJhY3QucHk6MTk0CiAgICAvLyBAYWJpbWV0aG9kCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptaW50X3Bsb3RfZWxzZV9ib2R5QDM6CiAgICAvLyBjb250cmFjdC5weToyMTMKICAgIC8vIGN1cnNvciA9IFVJbnQ2NCgwKQogICAgaW50Y18wIC8vIDAKICAgIGJ1cnkgNgogICAgLy8gY29udHJhY3QucHk6MjE0CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UocGxvdF9jb3VudF9hc19zdHJpbmcubGVuZ3RoKToKICAgIGludGNfMCAvLyAwCiAgICBidXJ5IDUKCm1pbnRfcGxvdF9mb3JfaGVhZGVyQDQ6CiAgICAvLyBjb250cmFjdC5weToyMTQKICAgIC8vIGZvciBpIGluIHVyYW5nZShwbG90X2NvdW50X2FzX3N0cmluZy5sZW5ndGgpOgogICAgZGlnIDQKICAgIGRpZyA0CiAgICA8CiAgICBieiBtaW50X3Bsb3RfYWZ0ZXJfaWZfZWxzZUAxMAogICAgLy8gY29udHJhY3QucHk6MjE1CiAgICAvLyBjdXJzb3IgKz0gMQogICAgZGlnIDUKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBkdXAKICAgIGJ1cnkgNwogICAgLy8gY29udHJhY3QucHk6MjE2CiAgICAvLyBpZiBjdXJzb3IgPT0gMzoKICAgIGludGNfMiAvLyAzCiAgICA9PQogICAgYnogbWludF9wbG90X2FmdGVyX2lmX2Vsc2VANwogICAgLy8gY29udHJhY3QucHk6MjE3CiAgICAvLyBwbG90X2NvdW50X3dpdGhfY29tbWFzID0gcGxvdF9jb3VudF93aXRoX2NvbW1hcyArIGInLCcKICAgIGRpZyA2CiAgICBwdXNoYnl0ZXMgMHgyYwogICAgY29uY2F0CiAgICBidXJ5IDcKICAgIC8vIGNvbnRyYWN0LnB5OjIxOAogICAgLy8gY3Vyc29yID0gVUludDY0KDApCiAgICBpbnRjXzAgLy8gMAogICAgYnVyeSA2CgptaW50X3Bsb3RfYWZ0ZXJfaWZfZWxzZUA3OgogICAgLy8gY29udHJhY3QucHk6MjE5CiAgICAvLyBwbG90X2NvdW50X3dpdGhfY29tbWFzID0gcGxvdF9jb3VudF93aXRoX2NvbW1hcyArIHBsb3RfY291bnRfYXNfc3RyaW5nW2ldCiAgICBkaWcgNwogICAgZGlnIDUKICAgIGR1cAogICAgY292ZXIgMgogICAgaW50Y18xIC8vIDEKICAgIGV4dHJhY3QzCiAgICBkaWcgOAogICAgc3dhcAogICAgY29uY2F0CiAgICBidXJ5IDgKICAgIC8vIGNvbnRyYWN0LnB5OjIxNAogICAgLy8gZm9yIGkgaW4gdXJhbmdlKHBsb3RfY291bnRfYXNfc3RyaW5nLmxlbmd0aCk6CiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgYnVyeSA1CiAgICBiIG1pbnRfcGxvdF9mb3JfaGVhZGVyQDQKCm1pbnRfcGxvdF9lbHNlX2JvZHlAMTU6CiAgICAvLyBjb250cmFjdC5weToyNTkKICAgIC8vIGJveC5jcmVhdGUoc2l6ZT1VSW50NjQoMTYpKQogICAgZGlnIDEKICAgIGR1cAogICAgcHVzaGludCAxNiAvLyAxNgogICAgYm94X2NyZWF0ZQogICAgcG9wCiAgICAvLyBjb250cmFjdC5weToyNjAKICAgIC8vIGJveC5yZXBsYWNlKDAsIHBsb3RfaW5mby5ieXRlcykKICAgIGludGNfMCAvLyAwCiAgICB1bmNvdmVyIDIKICAgIGJveF9yZXBsYWNlCiAgICBiIG1pbnRfcGxvdF9hZnRlcl9pZl9lbHNlQDE2Cg==", "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [297], "errorMessage": "OnCompletion must be NoOp"}, {"pc": [337], "errorMessage": "OnCompletion must be NoOp && can only call when creating"}, {"pc": [483, 534, 579, 864, 995, 1133], "errorMessage": "account funded"}, {"pc": [1022], "errorMessage": "check Box exists"}, {"pc": [543, 626], "errorMessage": "check self.eco_token exists"}, {"pc": [1006, 1111], "errorMessage": "check self.next_plot exists"}, {"pc": [988], "errorMessage": "check self.plot_cost exists"}, {"pc": [803, 1039], "errorMessage": "check self.plot_count exists"}, {"pc": [584], "errorMessage": "check self.pool_logicsig_template exists"}, {"pc": [616], "errorMessage": "check self.tinyman_router exists"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class MintEcoArgs:
    """Dataclass for mint_eco arguments"""
    mbr_payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "mint_eco(txn)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class BootstrapViaOuterAndAddInitialLiquidityArgs:
    """Dataclass for bootstrap_via_outer_and_add_initial_liquidity arguments"""
    mbr_payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "bootstrap_via_outer_and_add_initial_liquidity(txn)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class MintPlotArgs:
    """Dataclass for mint_plot arguments"""
    plot_payment: algokit_utils.AppMethodCallTransactionArgument | None = None
    mbr_payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "mint_plot(txn,txn)void"


class EcoParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def mint_eco(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | MintEcoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_eco(txn)uint64",
            "args": method_args,
        }))

    def bootstrap_via_outer_and_add_initial_liquidity(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BootstrapViaOuterAndAddInitialLiquidityArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bootstrap_via_outer_and_add_initial_liquidity(txn)void",
            "args": method_args,
        }))

    def mint_plot(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument | None, algokit_utils.AppMethodCallTransactionArgument] | MintPlotArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_plot(txn,txn)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class EcoCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def mint_eco(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | MintEcoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_eco(txn)uint64",
            "args": method_args,
        }))

    def bootstrap_via_outer_and_add_initial_liquidity(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BootstrapViaOuterAndAddInitialLiquidityArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bootstrap_via_outer_and_add_initial_liquidity(txn)void",
            "args": method_args,
        }))

    def mint_plot(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument | None, algokit_utils.AppMethodCallTransactionArgument] | MintPlotArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_plot(txn,txn)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class EcoSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def mint_eco(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | MintEcoArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_eco(txn)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def bootstrap_via_outer_and_add_initial_liquidity(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BootstrapViaOuterAndAddInitialLiquidityArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bootstrap_via_outer_and_add_initial_liquidity(txn)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def mint_plot(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument | None, algokit_utils.AppMethodCallTransactionArgument] | MintPlotArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mint_plot(txn,txn)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    eco_token: int
    eco_token_created: int
    eco_lp_token: int
    plot_count: int
    next_plot: int
    plot_cost: int
    plot_reward_rate: int
    pool_logicsig_template: bytes
    tinyman_router: int

class EcoState:
    """Methods to access state for the current Eco app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def eco_token(self) -> int:
        """Get the current value of the eco_token key in global_state state"""
        value = self.app_client.state.global_state.get_value("eco_token")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def eco_token_created(self) -> int:
        """Get the current value of the eco_token_created key in global_state state"""
        value = self.app_client.state.global_state.get_value("eco_token_created")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def eco_lp_token(self) -> int:
        """Get the current value of the eco_lp_token key in global_state state"""
        value = self.app_client.state.global_state.get_value("eco_lp_token")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def plot_count(self) -> int:
        """Get the current value of the plot_count key in global_state state"""
        value = self.app_client.state.global_state.get_value("plot_count")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def next_plot(self) -> int:
        """Get the current value of the next_plot key in global_state state"""
        value = self.app_client.state.global_state.get_value("next_plot")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def plot_cost(self) -> int:
        """Get the current value of the plot_cost key in global_state state"""
        value = self.app_client.state.global_state.get_value("plot_cost")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def plot_reward_rate(self) -> int:
        """Get the current value of the plot_reward_rate key in global_state state"""
        value = self.app_client.state.global_state.get_value("plot_reward_rate")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def pool_logicsig_template(self) -> bytes:
        """Get the current value of the pool_logicsig_template key in global_state state"""
        value = self.app_client.state.global_state.get_value("pool_logicsig_template")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def tinyman_router(self) -> int:
        """Get the current value of the tinyman_router key in global_state state"""
        value = self.app_client.state.global_state.get_value("tinyman_router")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class EcoClient:
    """Client for interacting with Eco smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = EcoParams(self.app_client)
        self.create_transaction = EcoCreateTransactionParams(self.app_client)
        self.send = EcoSend(self.app_client)
        self.state = EcoState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "EcoClient":
        return EcoClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "EcoClient":
        return EcoClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "EcoClient":
        return EcoClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "EcoComposer":
        return EcoComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["mint_eco(txn)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["bootstrap_via_outer_and_add_initial_liquidity(txn)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["mint_plot(txn,txn)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | int:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class EcoBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating Eco contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class EcoFactory(algokit_utils.TypedAppFactoryProtocol[EcoBareCallCreateParams, None, None]):
    """Factory for deploying and managing EcoClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = EcoFactoryParams(self.app_factory)
        self.create_transaction = EcoFactoryCreateTransaction(self.app_factory)
        self.send = EcoFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: EcoBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[EcoClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return EcoClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> EcoClient:
        """Get an app client by creator address and name"""
        return EcoClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> EcoClient:
        """Get an app client by app ID"""
        return EcoClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class EcoFactoryParams:
    """Parameters for creating transactions for Eco contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = EcoFactoryCreateParams(app_factory)
        self.update = EcoFactoryUpdateParams(app_factory)
        self.delete = EcoFactoryDeleteParams(app_factory)

class EcoFactoryCreateParams:
    """Parameters for 'create' operations of Eco contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def mint_eco(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | MintEcoArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the mint_eco(txn)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "mint_eco(txn)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def bootstrap_via_outer_and_add_initial_liquidity(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BootstrapViaOuterAndAddInitialLiquidityArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the bootstrap_via_outer_and_add_initial_liquidity(txn)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "bootstrap_via_outer_and_add_initial_liquidity(txn)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def mint_plot(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, algokit_utils.AppMethodCallTransactionArgument] | MintPlotArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the mint_plot(txn,txn)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "mint_plot(txn,txn)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class EcoFactoryUpdateParams:
    """Parameters for 'update' operations of Eco contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class EcoFactoryDeleteParams:
    """Parameters for 'delete' operations of Eco contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class EcoFactoryCreateTransaction:
    """Create transactions for Eco contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = EcoFactoryCreateTransactionCreate(app_factory)


class EcoFactoryCreateTransactionCreate:
    """Create new instances of Eco contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class EcoFactorySend:
    """Send calls to Eco contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = EcoFactorySendCreate(app_factory)


class EcoFactorySendCreate:
    """Send create calls to Eco contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[EcoClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return EcoClient(result[0]), result[1]


class EcoComposer:
    """Composer for creating transaction groups for Eco contract calls"""

    def __init__(self, client: "EcoClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def mint_eco(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | MintEcoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "EcoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.mint_eco(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "mint_eco(txn)uint64", v
            )
        )
        return self

    def bootstrap_via_outer_and_add_initial_liquidity(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BootstrapViaOuterAndAddInitialLiquidityArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "EcoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.bootstrap_via_outer_and_add_initial_liquidity(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "bootstrap_via_outer_and_add_initial_liquidity(txn)void", v
            )
        )
        return self

    def mint_plot(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument | None, algokit_utils.AppMethodCallTransactionArgument] | MintPlotArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "EcoComposer":
        self._composer.add_app_call_method_call(
            self.client.params.mint_plot(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "mint_plot(txn,txn)void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "EcoComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "EcoComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
