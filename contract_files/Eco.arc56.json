{
    "name": "Eco",
    "structs": {},
    "methods": [
        {
            "name": "mint_eco",
            "args": [
                {
                    "type": "txn",
                    "name": "mbr_payment"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bootstrap_via_outer_and_add_initial_liquidity",
            "args": [
                {
                    "type": "txn",
                    "name": "mbr_payment"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mint_plot",
            "args": [
                {
                    "type": "txn",
                    "name": "plot_payment"
                },
                {
                    "type": "txn",
                    "name": "mbr_payment"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claim_plot_rewards",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 8,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "eco_token": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZWNvX3Rva2Vu"
                },
                "eco_token_created": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZWNvX3Rva2VuX2NyZWF0ZWQ="
                },
                "eco_lp_token": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZWNvX2xwX3Rva2Vu"
                },
                "plot_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxvdF9jb3VudA=="
                },
                "next_plot": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bmV4dF9wbG90"
                },
                "plot_cost": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxvdF9jb3N0"
                },
                "plot_reward_rate": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxvdF9yZXdhcmRfcmF0ZQ=="
                },
                "pool_logicsig_template": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "cG9vbF9sb2dpY3NpZ190ZW1wbGF0ZQ=="
                },
                "tinyman_router": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dGlueW1hbl9yb3V0ZXI="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        294
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        341
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        487,
                        538,
                        579,
                        872,
                        1003,
                        1141
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        1030,
                        1232
                    ],
                    "errorMessage": "check Box exists"
                },
                {
                    "pc": [
                        547,
                        626,
                        1307
                    ],
                    "errorMessage": "check self.eco_token exists"
                },
                {
                    "pc": [
                        1014,
                        1119
                    ],
                    "errorMessage": "check self.next_plot exists"
                },
                {
                    "pc": [
                        996
                    ],
                    "errorMessage": "check self.plot_cost exists"
                },
                {
                    "pc": [
                        811,
                        1047
                    ],
                    "errorMessage": "check self.plot_count exists"
                },
                {
                    "pc": [
                        1271
                    ],
                    "errorMessage": "check self.plot_reward_rate exists"
                },
                {
                    "pc": [
                        584
                    ],
                    "errorMessage": "check self.pool_logicsig_template exists"
                },
                {
                    "pc": [
                        616
                    ],
                    "errorMessage": "check self.tinyman_router exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAFAAEDBMCEPSYOCWVjb190b2tlbgluZXh0X3Bsb3QKcGxvdF9jb3VudAAMZWNvX2xwX3Rva2VuCXBsb3RfY29zdBBwbG90X3Jld2FyZF9yYXRlFnBvb2xfbG9naWNzaWdfdGVtcGxhdGUOdGlueW1hbl9yb3V0ZXIKMDEyMzQ1Njc4OQNFQ08EFR98dQhQbG90ICM6IARQTE9UMRhAAH0oImeAEWVjb190b2tlbl9jcmVhdGVkImcnBCJnKiNnKSJnJwWBkE5nJwYhBGeAQEJvQVlBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQWdRQmJOUUEwQURFWUVrUXhHWUVCRWtTQkFVTT1eAScHTGcnCIGYoO5GZzEbQQArMRkURDEYRIIEBEfnfDgEb5kR/QRxNRJBBHzOnx82GgCOBACFAN8CZAN6ADEZFDEYFBBDMQAyCRJEiYoBAIv/OBBJIxJJQAAHiwAlEkEAGSNEiwFBAAmL/zgHMgoSRImL/zgUMgoSRIkiQv/kigMAi/6L/QmL/zgITAmxMQCyB7III7IQIrIBs4mKAQGL/4EKDEEABycJi/8jWImL/4EKCoj/5ov/gQoYJwlMI1hQiTEWIwmI/31JiP+ASTgQIxJEMgpzAUSxMgpJIrIksiqyKSKyI4H///////////8BsiInCrIlJwqyJiSyECKyAbMotDxnMgpzAURPAoj/byIoZUQWJwtMULAjQytJMRYjCUmI/yBJiP8jOBAjEkQyCnMBRCInB2VESRUiSwEPIksCTwJNJEsCDyRLA08CTUsDTgJSIicIZURJFk8CTFAiKGVESRZPAkxQgAgAAAAAAAAAAFCBG0sED4EbSwVPAk1PBUxPBVJQgAdQcm9ncmFtTFADSUsDgBNwb29sX3Rva2VuX2Fzc2V0X2lkY0gyCrGyFEmyESWyECKyAbaBgICAgICAgICAAbISSwGyFE8CshElshAisgG2IQSyCEsBsgcjshAisgG2TLIcSbIwgBVhZGRfaW5pdGlhbF9saXF1aWRpdHmyGiKyGUyyGIEGshAisgGzJwRMZyIqZUSI/n1JK0wVSSQOQQA9SwJFArEnDEsCUDIKSSKyJLIqsikisiMjsiInDbIlsiYkshAisgGzKbQ8ZzIKcwFEIQQISwRMSwaI/hsjQyJFByJFBksFSwEMQf+5SwYjCElFCCQSQQALSwGAASxQRQIiRQdLAksGSU4CI1hLA0xQRQMjCEUGQv/LIkkrRwIxFoECCTEWIwlJTgJLAYj9lkmI/ZJLATgQIxJEOBAjEkRJOAcyChJEOAgiJwVlRBJEMgpzAUSAAXAxAFBJIillRBYyBxZQTgK9RQFBALdJvURJgRAISwJM04EQSwPSIiplRCMIKksBZ4j9i0lFCStFCBVJRQUkDkEAUEsHRQexJwxLB1AyCkkisiSyKrIpIrIjI7IiJw2yJbImJLIQIrIBs7Q8sTEAIillRLIRshQjshIlshAisgGzKUxnMgpzAURLAkxLBIj9ESNDIkUGIkUFSwRLBAxB/6ZLBSMISUUHJBJBAAtLBoABLFBFByJFBksHSwVJTgIjWEsITFBFCCMIRQVC/8tJgRC5SCJLArtC/00igAFwMQBQSb1EgRAKIklLAgxBADtHAoEQCEsESU4DSwJPAroyB0sBgQhbCSInBmVEC0sHCEUHMgcWXAhLAYEICE8DTIEITwPSIwhFAUL/vrEiKGVEMQCyFEsESU4CshKyESWyECKyAbMWJwtMULAjQw==",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 1
        }
    },
    "events": [],
    "templateVariables": {}
}