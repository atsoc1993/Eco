{
    "name": "Eco",
    "structs": {},
    "methods": [
        {
            "name": "mint_eco_token",
            "args": [
                {
                    "type": "txn",
                    "name": "mbr_payment"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mint_plot",
            "args": [
                {
                    "type": "txn",
                    "name": "plot_payment"
                },
                {
                    "type": "txn",
                    "name": "mbr_payment"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 8,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "eco_token": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZWNvX3Rva2Vu"
                },
                "eco_token_created": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZWNvX3Rva2VuX2NyZWF0ZWQ="
                },
                "eco_lp_token": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZWNvX2xwX3Rva2Vu"
                },
                "plot_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxvdF9jb3VudA=="
                },
                "next_plot": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bmV4dF9wbG90"
                },
                "plot_cost": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxvdF9jb3N0"
                },
                "plot_reward_rate": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxvdF9yZXdhcmRfcmF0ZQ=="
                },
                "pool_logicsig_template": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "cG9vbF9sb2dpY3NpZ190ZW1wbGF0ZQ=="
                },
                "tinyman_router": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dGlueW1hbl9yb3V0ZXI="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        295
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        328
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        473,
                        917,
                        991,
                        1127
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        1018
                    ],
                    "errorMessage": "check Box exists"
                },
                {
                    "pc": [
                        1002
                    ],
                    "errorMessage": "check self.next_plot exists"
                },
                {
                    "pc": [
                        984
                    ],
                    "errorMessage": "check self.plot_cost exists"
                },
                {
                    "pc": [
                        795,
                        872,
                        1035
                    ],
                    "errorMessage": "check self.plot_count exists"
                },
                {
                    "pc": [
                        526
                    ],
                    "errorMessage": "check self.pool_logicsig_template exists"
                },
                {
                    "pc": [
                        558
                    ],
                    "errorMessage": "check self.tinyman_router exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEAAEDwIQ9Jg0KcGxvdF9jb3VudAluZXh0X3Bsb3QACWVjb190b2tlbgxlY29fbHBfdG9rZW4JcGxvdF9jb3N0FnBvb2xfbG9naWNzaWdfdGVtcGxhdGUOdGlueW1hbl9yb3V0ZXIKMDEyMzQ1Njc4OQNFQ08IAAAAAAAAAAAIUGxvdCAjOiAEUExPVDEYQACMKyJngBFlY29fdG9rZW5fY3JlYXRlZCJnJwQiZyiBkE5nKSJnJwUlZ4AQcGxvdF9yZXdhcmRfcmF0ZSVngEBCb0FZQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFnUUJiTlFBMEFERVlFa1F4R1lFQkVrU0JBVU09XgEnBkxnJweBmKDuRmcxG0EAHTEZFEQxGESCAgQ8SdQTBHE1EkE2GgCOAgB/AmUAMRkUMRgUEEOKAQCL/zgQSSMSSUAACIsAgQQSQQAZI0SLAUEACYv/OAcyChJEiYv/OBQyChJEiSJC/+SKAwCL/ov9CYv/OAhMCbExALIHsggjshAisgGziYoBAYv/gQoMQQAHJwiL/yNYiYv/gQoKiP/mi/+BChgnCEwjWFCJKkkxFiMJSTEAMgoSREmI/3k4ECMSRDIKcwFEsTIKSSKyJLIqsikisiOB////////////AbIiJwmyJScJsiYkshAisgGztDwrSwFnIicGZURJFSJLAQ8iSwJPAk0kSwIPJEsDTwJNSwNOAlIiJwdlREkWTwJMUEsEFlAnClCBG0sDD4EbSwRPAk1PBExPBFJQgAdQcm9ncmFtTFADsSWyCEmyByOyECKyAbZLArIwIrIwSbIgSbIAgAlib290c3RyYXCyGiOyGUsBshiBBrIQIrIBs0lLAoATcG9vbF90b2tlbl9hc3NldF9pZGNIMgqxshRJshGBBLIQIrIBtoGAgICAgICAgIABshJLAbIUTwOyEYEEshAisgG2JbIISwGyByOyECKyAbZMshxJsjCAFWFkZF9pbml0aWFsX2xpcXVpZGl0ebIaIrIZTLIYgQayECKyAbMnBExnIihlRIj+ekkqTBVJJA5AADsiRQciRQZLBUsBDEEALUsGIwhJRQgkEkEAC0sBgAEsUEUCIkUHSwJLBklOAiNYSwNMUEUDIwhFBkL/y7EiKGVEiP4tJwtMUDIKSSKyJLIqsikisiMjsiInDLIlsiYkshAisgGzKbQ8ZzIKcwFEgYCJeghLBExLBoj92SNDIkkqRwIxFoECCTEWIwlJTgJLAYj9jkmI/YpLATgQIxJEOBAjEkRJOAcyChJEOAgiJwVlRBJEMgpzAUSAAXAxAFBJIillRBYnClBMvUUBQQC3SwFJvURJgRAISwJM04EQTwPSIihlRCMIKEsBZ4j9hElFCSpFCBVJRQUkDkEATksHRQexJwtLB1AyCkkisiSyKrIpIrIjI7IiJwyyJbImJLIQIrIBs7Q8KUsBZ7ExALIUshEjshKBBLIQIrIBszIKcwFESwJMSwSI/QwjQyJFBiJFBUsESwQMQf+oSwUjCElFByQSQQALSwaAASxQRQciRQZLB0sFSU4CI1hLCExQRQgjCEUFQv/LSwFJgRC5SCJPArtC/00=",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 1
        }
    },
    "events": [],
    "templateVariables": {}
}