{
    "name": "Eco",
    "structs": {},
    "methods": [
        {
            "name": "mint_eco",
            "args": [
                {
                    "type": "txn",
                    "name": "mbr_payment"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bootstrap_via_outer_and_add_initial_liquidity",
            "args": [
                {
                    "type": "txn",
                    "name": "mbr_payment"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mint_plot",
            "args": [
                {
                    "type": "txn",
                    "name": "plot_payment"
                },
                {
                    "type": "txn",
                    "name": "mbr_payment"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claim_plot_rewards",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 8,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "eco_token": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZWNvX3Rva2Vu"
                },
                "eco_token_created": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZWNvX3Rva2VuX2NyZWF0ZWQ="
                },
                "eco_lp_token": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZWNvX2xwX3Rva2Vu"
                },
                "plot_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxvdF9jb3VudA=="
                },
                "next_plot": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bmV4dF9wbG90"
                },
                "plot_cost": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxvdF9jb3N0"
                },
                "plot_reward_rate": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cGxvdF9yZXdhcmRfcmF0ZQ=="
                },
                "pool_logicsig_template": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "cG9vbF9sb2dpY3NpZ190ZW1wbGF0ZQ=="
                },
                "tinyman_router": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dGlueW1hbl9yb3V0ZXI="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        303
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        350
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        496,
                        547,
                        588,
                        873,
                        1004,
                        1141
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        1030,
                        1232
                    ],
                    "errorMessage": "check Box exists"
                },
                {
                    "pc": [
                        556,
                        635,
                        1307
                    ],
                    "errorMessage": "check self.eco_token exists"
                },
                {
                    "pc": [
                        1015,
                        1119
                    ],
                    "errorMessage": "check self.next_plot exists"
                },
                {
                    "pc": [
                        997
                    ],
                    "errorMessage": "check self.plot_cost exists"
                },
                {
                    "pc": [
                        812,
                        1047
                    ],
                    "errorMessage": "check self.plot_count exists"
                },
                {
                    "pc": [
                        1271
                    ],
                    "errorMessage": "check self.plot_reward_rate exists"
                },
                {
                    "pc": [
                        593
                    ],
                    "errorMessage": "check self.pool_logicsig_template exists"
                },
                {
                    "pc": [
                        625
                    ],
                    "errorMessage": "check self.tinyman_router exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAFAAEDBMCEPSYPCWVjb190b2tlbgluZXh0X3Bsb3QKcGxvdF9jb3VudAAMZWNvX2xwX3Rva2VuCXBsb3RfY29zdBBwbG90X3Jld2FyZF9yYXRlFnBvb2xfbG9naWNzaWdfdGVtcGxhdGUOdGlueW1hbl9yb3V0ZXIKMDEyMzQ1Njc4OQNFQ08EFR98dQgAAAAAAAAAAAhQbG90ICM6IARQTE9UMRhAAH0oImeAEWVjb190b2tlbl9jcmVhdGVkImcnBCJnKiNnKSJnJwWBkE5nJwYhBGeAQEJvQVlBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQWdRQmJOUUEwQURFWUVrUXhHWUVCRWtTQkFVTT1eAScHTGcnCIGYoO5GZzEbQQArMRkURDEYRIIEBEfnfDgEb5kR/QRxNRJBBHzOnx82GgCOBACFAN8CXANxADEZFDEYFBBDMQAyCRJEiYoBAIv/OBBJIxJJQAAHiwAlEkEAGSNEiwFBAAmL/zgHMgoSRImL/zgUMgoSRIkiQv/kigMAi/6L/QmL/zgITAmxMQCyB7III7IQIrIBs4mKAQGL/4EKDEEABycJi/8jWImL/4EKCoj/5ov/gQoYJwlMI1hQiTEWIwmI/31JiP+ASTgQIxJEMgpzAUSxMgpJIrIksiqyKSKyI4H///////////8BsiInCrIlJwqyJiSyECKyAbMotDxnMgpzAURPAoj/byIoZUQWJwtMULAjQytJMRYjCUmI/yBJiP8jOBAjEkQyCnMBRCInB2VESRUiSwEPIksCTwJNJEsCDyRLA08CTUsDTgJSIicIZURJFk8CTFAiKGVESRZPAkxQJwxQgRtLBA+BG0sFTwJNTwVMTwVSUIAHUHJvZ3JhbUxQA0lLA4ATcG9vbF90b2tlbl9hc3NldF9pZGNIMgqxshRJshElshAisgG2gYCAgICAgICAgAGyEksBshRPArIRJbIQIrIBtiEEsghLAbIHI7IQIrIBtkyyHEmyMIAVYWRkX2luaXRpYWxfbGlxdWlkaXR5shoishlMshiBBrIQIrIBsycETGciKmVEiP6FSStMFUkkDkEAPUsCRQKxJw1LAlAyCkkisiSyKrIpIrIjI7IiJw6yJbImJLIQIrIBsym0PGcyCnMBRCEECEsETEsGiP4jI0MiRQciRQZLBUsBDEH/uUsGIwhJRQgkEkEAC0sBgAEsUEUCIkUHSwJLBklOAiNYSwNMUEUDIwhFBkL/yyJJK0cCMRaBAgkxFiMJSU4CSwGI/Z5JiP2aSwE4ECMSRDgQIxJESTgHMgoSRDgIIicFZUQSRDIKcwFEgAFwMQBQSSIpZUQWJwxQTgK9RQFBALdJvURJgRAISwJM04EQSwPSIiplRCMIKksBZ4j9lElFCStFCBVJRQUkDkEAUEsHRQexJw1LB1AyCkkisiSyKrIpIrIjI7IiJw6yJbImJLIQIrIBs7Q8sTEAIillRLIRshQjshIlshAisgGzKUxnMgpzAURLAkxLBIj9GiNDIkUGIkUFSwRLBAxB/6ZLBSMISUUHJBJBAAtLBoABLFBFByJFBksHSwVJTgIjWEsITFBFCCMIRQVC/8tJgRC5SCJLArtC/00igAFwMQBQSb1EgRAKIklLAgxBADtHAoEQCEsESU4DSwJPAroyB0sBgQhbCSInBmVEC0sHCEUHMgcWXAhLAYEICE8DTIEITwPSIwhFAUL/vrEiKGVEMQCyFEsESU4CshKyESWyECKyAbMWJwtMULAjQw==",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 1
        }
    },
    "events": [],
    "templateVariables": {}
}